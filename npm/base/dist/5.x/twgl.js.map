{"version":3,"file":"twgl.js","mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASmqB,gBAAgBA,CAACJ,gBAAgB,EAAExc,MAAM,EAAE;EAClD,IAAM+b,OAAO,GAAGS,gBAAgB,CAACT,OAAO;EACxC,KAAK,IAAMxqB,IAAI,IAAIyO,MAAM,EAAE;IACzB,IAAMiO,MAAM,GAAG8N,OAAO,CAACxqB,IAAI,CAAC;IAC5B,IAAI0c,MAAM,EAAE;MACV,IAAM5Z,KAAK,GAAG2L,MAAM,CAACzO,IAAI,CAAC;MAC1B0c,MAAM,CAAC5Z,KAAK,CAAC;IACf;EACF;AACF;AAEA,SAASikB,cAAcA,CAACuE,IAAI,EAAE7c,MAAM,EAAE;EACpC,KAAK,IAAMzO,IAAI,IAAIyO,MAAM,EAAE;IACzB,IAAM8c,IAAI,GAAGD,IAAI,CAACtrB,IAAI,CAAC;IACvB,IAAI,OAAOurB,IAAI,KAAK,UAAU,EAAE;MAC9BA,IAAI,CAAC9c,MAAM,CAACzO,IAAI,CAAC,CAAC;IACpB,CAAC,MAAM;MACL+mB,cAAc,CAACuE,IAAI,CAACtrB,IAAI,CAAC,EAAEyO,MAAM,CAACzO,IAAI,CAAC,CAAC;IAC1C;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASsG,WAAWA,CAACkkB,OAAO,EAAW;EAAG;EACxC,IAAMgB,aAAa,GAAGhB,OAAO,CAAClE,cAAc,IAAIkE,OAAO;EACvD,IAAMiB,OAAO,GAAA7f,SAAA,CAAAtL,MAAA,YAAAsL,SAAA,CAAAtL,MAAA,IAAc;EAC3B,KAAK,IAAIorB,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGD,OAAO,EAAE,EAAEC,IAAI,EAAE;IACzC,IAAMjd,MAAM,GAAQid,IAAI,YAAA9f,SAAA,CAAAtL,MAAA,IAAJorB,IAAI,OAAA9sB,SAAA,GAAAgN,SAAA,CAAJ8f,IAAI,KAAC;IACzB,IAAIrqB,KAAK,CAACC,OAAO,CAACmN,MAAM,CAAC,EAAE;MACzB,IAAMxN,SAAS,GAAGwN,MAAM,CAACnO,MAAM;MAC/B,KAAK,IAAIwD,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAG7C,SAAS,EAAE,EAAE6C,EAAE,EAAE;QACrCwC,WAAW,CAACklB,aAAa,EAAE/c,MAAM,CAAC3K,EAAE,CAAC,CAAC;MACxC;IACF,CAAC,MAAM;MACL,KAAK,IAAM9D,IAAI,IAAIyO,MAAM,EAAE;QACzB,IAAMiO,MAAM,GAAG8O,aAAa,CAACxrB,IAAI,CAAC;QAClC,IAAI0c,MAAM,EAAE;UACVA,MAAM,CAACjO,MAAM,CAACzO,IAAI,CAAC,CAAC;QACtB;MACF;IACF;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAM2rB,0BAA0B,GAAAhI,kCAAA,GAAGrd,WAAW;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASslB,sBAAsBA,CAACjtB,EAAE,EAAEuH,OAAO,EAAE;EAC3C,IAAM2lB,aAAa,GAAG,CACtB,CAAC;EAED,IAAMC,UAAU,GAAGntB,EAAE,CAAC6lB,mBAAmB,CAACte,OAAO,EAAEwP,iBAAiB,CAAC;EACrE,KAAK,IAAI5R,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGgoB,UAAU,EAAE,EAAEhoB,EAAE,EAAE;IACtC,IAAMN,UAAU,GAAG7E,EAAE,CAACotB,eAAe,CAAC7lB,OAAO,EAAEpC,EAAE,CAAC;IAClD,IAAIiiB,SAAS,CAACviB,UAAU,CAAC,EAAE;MACzB;IACF;IACA,IAAMiZ,KAAK,GAAG9d,EAAE,CAACqtB,iBAAiB,CAAC9lB,OAAO,EAAE1C,UAAU,CAACxD,IAAI,CAAC;IAC5D,IAAM+d,QAAQ,GAAGG,WAAW,CAAC1a,UAAU,CAACnE,IAAI,CAAC;IAC7C,IAAMqd,MAAM,GAAGqB,QAAQ,CAACrB,MAAM,CAAC/d,EAAE,EAAE8d,KAAK,EAAEsB,QAAQ,CAAC;IACnDrB,MAAM,CAAC7D,QAAQ,GAAG4D,KAAK;IACvBoP,aAAa,CAACroB,UAAU,CAACxD,IAAI,CAAC,GAAG0c,MAAM;EACzC;EAEA,OAAOmP,aAAa;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,aAAaA,CAACzB,OAAO,EAAE1lB,OAAO,EAAE;EACvC,KAAK,IAAM9E,IAAI,IAAI8E,OAAO,EAAE;IAC1B,IAAM4X,MAAM,GAAG8N,OAAO,CAACxqB,IAAI,CAAC;IAC5B,IAAI0c,MAAM,EAAE;MACVA,MAAM,CAAC5X,OAAO,CAAC9E,IAAI,CAAC,CAAC;IACvB;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASqG,uBAAuBA,CAAC1H,EAAE,EAAEmH,WAAW,EAAEhB,OAAO,EAAE;EACzD,IAAIA,OAAO,CAACqB,iBAAiB,EAAE;IAC7BxH,EAAE,CAACyH,eAAe,CAACtB,OAAO,CAACqB,iBAAiB,CAAC;EAC/C,CAAC,MAAM;IACL8lB,aAAa,CAACnmB,WAAW,CAAC+lB,aAAa,IAAI/lB,WAAW,EAAEhB,OAAO,CAACrC,OAAO,CAAC;IACxE,IAAIqC,OAAO,CAACL,OAAO,EAAE;MACnB9F,EAAE,CAACc,UAAU,CAACvB,oBAAoB,EAAE4G,OAAO,CAACL,OAAO,CAAC;IACtD;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASynB,4BAA4BA,CAACvtB,EAAE,EAAEuH,OAAO,EAAE;EACjD,IAAMogB,cAAc,GAAGU,oBAAoB,CAACroB,EAAE,EAAEuH,OAAO,CAAC;EACxD,IAAM2lB,aAAa,GAAGD,sBAAsB,CAACjtB,EAAE,EAAEuH,OAAO,CAAC;EACzD,IAAMJ,WAAW,GAAG;IAClBI,OAAO,EA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AWA,CAACC,WAAW,EAAE;EAChCxC,MAAM,CAACyC,sBAAsB,CAACD,WAAW,EAAEL,QAAQ,CAAC;EACpD,IAAIK,WAAW,CAACivB,YAAY,EAAE;IAC5BuH,sBAAsB,CAACx2B,WAAW,CAACivB,YAAY,CAAC;EAClD;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASyH,YAAYA,CAACj3B,EAAE,EAAEqiB,OAAO,EAAE;EAAA,IAAA6U,qBAAA,EAAAC,qBAAA,EAAAC,cAAA;EACjCp3B,EAAE,CAACq3B,WAAW,CAAC3F,kCAAkC,GAAAwF,qBAAA,GAAE7U,OAAO,CAACiV,oBAAoB,cAAAJ,qBAAA,cAAAA,qBAAA,GAAI,CAAC,CAAC;EACrFl3B,EAAE,CAACq3B,WAAW,CAAC1F,8BAA8B,GAAAwF,qBAAA,GAAE9U,OAAO,CAACkV,gBAAgB,cAAAJ,qBAAA,cAAAA,qBAAA,GAAI,CAAC,CAAC;EAC7En3B,EAAE,CAACq3B,WAAW,CAACzF,mBAAmB,GAAAwF,cAAA,GAAE/U,OAAO,CAACmV,KAAK,cAAAJ,cAAA,cAAAA,cAAA,GAAI,CAAC,CAAC;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASK,qBAAqB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CAAA,IAAAV,CAAA,CAAAM,CAAA,IAAAd,CAAA,CAAAc,CAAA,YAAAN,CAAA,cAAAR,CAAA,EAAAG,CAAA,IAAAA,CAAA,CAAAgB,GAAA,CAAAnB,CAAA,EAAAQ,CAAA,GAAAA,CAAA;AA3anC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAMuB,EAAE,GAAGC,SAAS,CAAC,CAAE;AACvB,IAAMC,QAAQ,GAAG;EACfk/B,sBAAsB,EAAE;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS9+B,WAAWA,CAACC,WAAW,EAAE;EAChCxC,MAAM,CAACyC,sBAAsB,CAACD,WAAW,EAAEL,QAAQ,CAAC;EACpD4+B,UAAU,CAACO,qBAAqB,CAAC9+B,WAAW,CAAC,CAAC,CAAE;EAChDsH,QAAQ,CAACy3B,mBAAmB,CAAC/+B,WAAW,CAAC,CAAC,CAAE;AAC9C;AAEA,IAAMg/B,QAAQ,GAAG,SAAS;AAC1B,SAASC,qBAAqBA,CAACx/B,EAAE,EAAEy/B,aAAa,EAAE;EAChDvxB,KAAK,CAAC0T,cAAc,CAAC5hB,EAAE,EAAE,CAAC,CAAC;EAC3B,IAAMulB,GAAG,GAAGvlB,EAAE,CAAC4lB,YAAY,CAAC6Z,aAAa,CAAC;EAC1C,IAAIla,GAAG,EAAE;IACP,IAAMma,KAAK,GAAG,CAAC,CAAC;IAChB,IAAMC,QAAQ,GAAGJ,QAAQ,CAACK,IAAI,CAACH,aAAa,CAAC,CAAC,CAAC,CAAC;IAChD,IAAMI,UAAU,GAAG,GAAG,GAAGF,QAAQ;IACjC,KAAK,IAAMz6B,GAAG,IAAIqgB,GAAG,EAAE;MACrB,IAAMphB,KAAK,GAAGohB,GAAG,CAACrgB,GAAG,CAAC;MACtB,IAAM46B,MAAM,GAAG,OAAQ37B,KAAM,KAAK,UAAU;MAC5C,IAAM47B,MAAM,GAAGD,MAAM,GAAGH,QAAQ,GAAGE,UAAU;MAC7C,IAAIx+B,IAAI,GAAG6D,GAAG;MACd;MACA;MACA,IAAIA,GAAG,CAACujB,QAAQ,CAACsX,MAAM,CAAC,EAAE;QACxB1+B,IAAI,GAAG6D,GAAG,CAACyI,SAAS,CAAC,CAAC,EAAEzI,GAAG,CAACvD,MAAM,GAAGo+B,MAAM,CAACp+B,MAAM,CAAC;MACrD;MACA,IAAI3B,EAAE,CAACqB,IAAI,CAAC,KAAKpB,SAAS,EAAE;QAC1B,IAAI,CAAC6/B,MAAM,IAAI9/B,EAAE,CAACqB,IAAI,CAAC,KAAK8C,KAAK,EAAE;UACjCpG,MAAM,CAACmP,IAAI,CAAC7L,IAAI,EAAErB,EAAE,CAACqB,IAAI,CAAC,EAAE8C,KAAK,EAAEe,GAAG,CAAC;QACzC;MACF,CAAC,MAAM;QACL,IAAI46B,MAAM,EAAE;UACV9/B,EAAE,CAACqB,IAAI,CAAC,GAAG,UAAS2+B,MAAM,EAAE;YAC1B,OAAO,YAAW;cAChB,OAAOA,MAAM,CAAChzB,KAAK,CAACuY,GAAG,EAAEtY,SAAS,CAAC;YACrC,CAAC;UACH,CAAC,CAAC9I,KAAK,CAAC;QACV,CAAC,MAAM;UACLnE,EAAE,CAACqB,IAAI,CAAC,GAAG8C,KAAK;UAChBu7B,KAAK,CAACr+B,IAAI,CAAC,GAAG8C,KAAK;QACrB;MACF;IACF;IACA;IACAu7B,KAAK,CAACh8B,WAAW,GAAG;MAClBrC,IAAI,EAAEkkB,GAAG,CAAC7hB,WAAW,CAACrC;IACxB,CAAC;IACD6M,KAAK,CAAC0T,cAAc,CAAC8d,KAAK,EAAE,CAAC,CAAC;EAChC;EACA,OAAOna,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAM0a,mBAAmB,GAAG,CAC1B,wBAAwB,EACxB,kBAAkB,EAClB,wBAAwB,EACxB,6BAA6B,EAC7B,0BAA0B,EAC1B,iCAAiC,EACjC,gBAAgB,EAChB,UAAU,EACV,wBAAwB,EACxB,gCAAgC,EAChC,wBAAwB,EACxB,0BAA0B,EAC1B,mBAAmB,EACnB,0BAA0B,EAC1B,wBAAwB,EACxB,+BAA+B,EAC/B,yBAAyB,EACzB,0BAA0B,EAC1B,8BAA8B,EAC9B,+BAA+B,EAC/B,gCAAgC,EAChC,+BAA+B,EAC/B,oCAAoC,EACpC,qBAAqB,EACrB,oBAAoB,CACrB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASb,sBAAsBA,CAACp/B,EAAE,EAAE;EAClC,KAAK,IAAImF,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAG86B,mBAAmB,CAACt+B,MAAM,EAAE,EAAEwD,EAAE,EAAE;IACtDq6B,qBAAqB,CAACx/B,EAAE,EAAEigC,mBAAmB,CAAC96B,EAAE,CAAC,CAAC;EACpD;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS+6B,eAAeA,CAAClG,MAAM,EAAElY,WAAW,EAAE;EAC5C,IAAMpV,KAAK,GAAG,CAAC,OAAO,EAAE,oBAAoB,CAAC;EAC7C,IAAIyzB,OAAO,GAAG,IAAI;EAClB,KAAK,IAAIh7B,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGuH,KAAK,CAAC/K,MAAM,EAAE,EAAEwD,EAAE,EAAE;IACxCg7B,OAAO,GAAGnG,MAAM,CAACnK,UAAU,CAACnjB,KAAK,CAACvH,EAAE,CAAC,EAAE2c,WAAW,CAAC;IACnD,IAAIqe,OAAO,EAAE;MACX,IAAIjgC,QAAQ,CAACk/B,sBAAsB,EAAE;QACnCA,sBAAsB,CAACe,OAAO,CAAC;MACjC;MACA;IACF;EACF;EACA,OAAOA,OAAO;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACpG,MAAM,EAAElY,WAAW,EAAE;EAC5C,IAAM9hB,EAAE,GAAGkgC,eAAe,CAAClG,MAAM,EAAElY,WAAW,CAAC;EAC/C,OAAO9hB,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASqgC,aAAaA,CAACrG,MAAM,EAAElY,WAAW,EAAE;EAC1C,IAAMpV,KAAK,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,oBAAoB,CAAC;EACvD,IAAIyzB,OAAO,GAAG,IAAI;EAClB,KAAK,IAAIh7B,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGuH,KAAK,CAAC/K,MAAM,EAAE,EAAEwD,EAAE,EAAE;IACxCg7B,OAAO,GAAGnG,MAAM,CAACnK,UAAU,CAACnjB,KAAK,CAACvH,EAAE,CAAC,EAAE2c,WAAW,CAAC;IACnD,IAAIqe,OAAO,EAAE;MACX,IAAIjgC,QAAQ,CAACk/B,sBAAsB,EAAE;QACnCA,sBAAsB,CAACe,OAAO,CAAC;MACjC;MACA;IACF;EACF;EACA,OAAOA,OAAO;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAStQ,UAAUA,CAACmK,MAAM,EAAElY,WAAW,EAAE;EACvC,IAAM9hB,EAAE,GAAGqgC,aAAa,CAACrG,MAAM,EAAElY,WAAW,CAAC;EAC7C,OAAO9hB,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASsgC,yBAAyBA,CAACtG,MAAM,EAAEuG,UAAU,EAAE;EACrDA,UAAU,GAAGA,UAAU,IAAI,CAAC;EAC5BA,UAAU,GAAG1J,IAAI,CAAC6D,GAAG,CAAC,CAAC,EAAE6F,UAAU,CAAC;EACpC,IAAMr2B,KAAK,GAAI8vB,MAAM,CAACwG,WAAW,GAAID,UAAU,GAAG,CAAC;EACnD,IAAMp2B,MAAM,GAAG6vB,MAAM,CAACyG,YAAY,GAAGF,UAAU,GAAG,CAAC;EACnD,IAAIvG,MAAM,CAAC9vB,KAAK,KAAKA,KAAK,IAAI8vB,MAAM,CAAC7vB,MAAM,KAAKA,MAAM,EAAE;IACtD6vB,MAAM,CAAC9vB,KAAK,GAAGA,KAAK;IACpB8vB,MAAM,CAAC7vB,MAAM,GAAGA,MAAM;IACtB,OAAO,IAAI;EACb;EACA,OAAO,KAAK;AACd;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AClaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAMnK,EAAE,GAAGC,SAAS,CAAC,CAAE;;AAEvB;AACA,IAAMR,IAAI,GAA6B,MAAM;AAC7C,IAAMC,aAAa,GAAoB,MAAM;AAC7C,IAAMC,KAAK,GAA4B,MAAM;AAC7C,IAAMC,cAAc,GAAmB,MAAM;AAC7C,IAAMC,GAAG,GAA8B,MAAM;AAC7C,IAAMC,YAAY,GAAqB,MAAM;AAC7C,IAAMC,KAAK,GAA4B,MAAM;AAC7C,IAAM40B,sBAAsB,GAAS,MAAM;AAC3C,IAAMC,sBAAsB,GAAS,MAAM;AAC3C,IAAMC,oBAAoB,GAAW,MAAM;AAC3C,IAAMC,UAAU,GAAqB,MAAM;AAC3C,IAAME,2BAA2B,GAAI,MAAM;AAC3C,IAAMC,4BAA4B,GAAG,MAAM;AAC3C,IAAMC,wBAAwB,GAAO,MAAM;AAC3C,IAAMC,8BAA8B,GAAG,MAAM;AAC7C,IAAMC,iBAAiB,GAAc,MAAM;AAE3C,IAAMsL,kBAAkB,GAAG,CAAC,CAAC;AAC7B;EACE,IAAMC,EAAE,GAAGD,kBAAkB;EAC7BC,EAAE,CAAClhC,IAAI,CAAC,GAA6B+B,SAAS;EAC9Cm/B,EAAE,CAACjhC,aAAa,CAAC,GAAoB+B,UAAU;EAC/Ck/B,EAAE,CAAChhC,KAAK,CAAC,GAA4BihC,UAAU;EAC/CD,EAAE,CAAC/gC,cAAc,CAAC,GAAmBkD,WAAW;EAChD69B,EAAE,CAAC9gC,GAAG,CAAC,GAA8Bge,UAAU;EAC/C8iB,EAAE,CAAC7gC,YAAY,CAAC,GAAqBoe,WAAW;EAChDyiB,EAAE,CAAC5gC,KAAK,CAAC,GAA4BgD,YAAY;EACjD49B,EAAE,CAAChM,sBAAsB,CAAC,GAAW7xB,WAAW;EAChD69B,EAAE,CAAC/L,sBAAsB,CAAC,GAAW9xB,WAAW;EAChD69B,EAAE,CAAC9L,oBAAoB,CAAC,GAAa/xB,WAAW;EAChD69B,EAAE,CAAC7L,UAAU,CAAC,GAAuBhyB,WAAW;EAChD69B,EAAE,CAAC3L,2BAA2B,CAAC,GAAM9W,WAAW;EAChDyiB,EAAE,CAAC1L,4BAA4B,CAAC,GAAK/W,WAAW;EAChDyiB,EAAE,CAACzL,wBAAwB,CAAC,GAAShX,WAAW;EAChDyiB,EAAE,CAACxL,8BAA8B,CAAC,GAAGjX,WAAW;EAChDyiB,EAAE,CAACvL,iBAAiB,CAAC,GAAgBlX,WAAW;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASva,sBAAsBA,CAAC1C,UAAU,EAAE;EAC1C,IAAIA,UAAU,YAAYO,SAAS,EAAU;IAAE,OAAO/B,IAAI;EAAE,CAAC,CAAW;EACxE,IAAIwB,UAAU,YAAYQ,UAAU,EAAS;IAAE,OAAO/B,aAAa;EAAE,CAAC,CAAE;EACxE,IAAIuB,UAAU,YAAY88B,iBAAiB,EAAE;IAAE,OAAOr+B,aAAa;EAAE,CAAC,CAAE;EACxE,IAAIuB,UAAU,YAAY2/B,UAAU,EAAS;IAAE,OAAOjhC,KAAK;EAAE,CAAC,CAAU;EACxE,IAAIsB,UAAU,YAAY6B,WAAW,EAAQ;IAAE,OAAOlD,cAAc;EAAE,CAAC,CAAC;EACxE,IAAIqB,UAAU,YAAY4c,UAAU,EAAS;IAAE,OAAOhe,GAAG;EAAE,CAAC,CAAY;EACxE,IAAIoB,UAAU,YAAYid,WAAW,EAAQ;IAAE,OAAOpe,YAAY;EAAE,CAAC,CAAG;EACxE,IAAImB,UAAU,YAAY8B,YAAY,EAAO;IAAE,OAAOhD,KAAK;EAAE,CAAC,CAAU;EACxE,MAAM,IAAImC,KAAK,CAAC,8BAA8B,CAAC;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgB,0BAA0BA,CAAC3B,cAAc,EAAE;EAClD,IAAIA,cAAc,KAAKC,SAAS,EAAU;IAAE,OAAO/B,IAAI;EAAE,CAAC,CAAW;EACrE,IAAI8B,cAAc,KAAKE,UAAU,EAAS;IAAE,OAAO/B,aAAa;EAAE,CAAC,CAAE;EACrE,IAAI6B,cAAc,KAAKw8B,iBAAiB,EAAE;IAAE,OAAOr+B,aAAa;EAAE,CAAC,CAAE;EACrE,IAAI6B,cAAc,KAAKq/B,UAAU,EAAS;IAAE,OAAOjhC,KAAK;EAAE,CAAC,CAAU;EACrE,IAAI4B,cAAc,KAAKuB,WAAW,EAAQ;IAAE,OAAOlD,cAAc;EAAE,CAAC,CAAC;EACrE,IAAI2B,cAAc,KAAKsc,UAAU,EAAS;IAAE,OAAOhe,GAAG;EAAE,CAAC,CAAY;EACrE,IAAI0B,cAAc,KAAK2c,WAAW,EAAQ;IAAE,OAAOpe,YAAY;EAAE,CAAC,CAAG;EACrE,IAAIyB,cAAc,KAAKwB,YAAY,EAAO;IAAE,OAAOhD,KAAK;EAAE,CAAC,CAAU;EACrE,MAAM,IAAImC,KAAK,CAAC,8BAA8B,CAAC;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASiB,0BAA0BA,CAACzC,IAAI,EAAE;EACxC,IAAMmgC,IAAI,GAAGH,kBAAkB,CAAChgC,IAAI,CAAC;EACrC,IAAI,CAACmgC,IAAI,EAAE;IACT,MAAM,IAAI3+B,KAAK,CAAC,iBAAiB,CAAC;EACpC;EACA,OAAO2+B,IAAI;AACb;AAEA,IAAMp+B,aAAa,GAAAuiB,qBAAA,GAAG,OAAO8b,iBAAiB,KAAK,WAAW,GAC1D,SAASC,gCAAgCA,CAACpiC,CAAC,EAAE;EAC7C,OAAOA,CAAC,IAAIA,CAAC,CAACgC,MAAM,KAAKhC,CAAC,CAACgC,MAAM,YAAY8qB,WAAW,IAAI9sB,CAAC,CAACgC,MAAM,YAAYmgC,iBAAiB,CAAC;AACpG,CAAC,GACC,SAASr+B,aAAaA,CAAC9D,CAAC,EAAE;EAC1B,OAAOA,CAAC,IAAIA,CAAC,CAACgC,MAAM,IAAIhC,CAAC,CAACgC,MAAM,YAAY8qB,WAAW;AACzD,CAAC;;;;;;;;;;;;;;;;ACzIH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASrO,QAAQA,CAACpd,EAAE,EAAE;EACpB;EACA;EACA;EACA;EACA,OAAO,CAAC,CAACA,EAAE,CAACghC,YAAY;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQA,CAACjhC,EAAE,EAAE;EACpB;EACA;EACA;EACA;EACA;EACA,OAAO,CAACA,EAAE,CAACghC,YAAY;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMpf,cAAc,GAAAoD,sBAAA,GAAI,YAAW;EACjC,IAAMkc,gBAAgB,GAAG,CAAC,CAAC;EAC3B,IAAMxB,KAAK,GAAG,CAAC,CAAC;EAEhB,SAASyB,QAAQA,CAACnhC,EAAE,EAAE;IACpB,IAAMU,IAAI,GAAGV,EAAE,CAAC0D,WAAW,CAACrC,IAAI;IAChC,IAAI,CAAC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","sources":["webpack://twgl/webpack/universalModuleDefinition","webpack://twgl/./src/attributes.js","webpack://twgl/./src/draw.js","webpack://twgl/./src/framebuffers.js","webpack://twgl/./src/helper.js","webpack://twgl/./src/programs.js","webpack://twgl/./src/textures.js","webpack://twgl/./src/twgl-base.js","webpack://twgl/./src/twgl.js","webpack://twgl/./src/typedarrays.js","webpack://twgl/./src/utils.js","webpack://twgl/./src/vertex-arrays.js","webpack://twgl/webpack/bootstrap","webpack://twgl/webpack/before-startup","webpack://twgl/webpack/startup","webpack://twgl/webpack/after-startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"twgl\"] = factory();\n\telse\n\t\troot[\"twgl\"] = factory();\n})(typeof self !== 'undefined' ? self : this, () => {\nreturn ","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as typedArrays from './typedarrays.js';\nimport * as helper from './helper.js';\n\nconst STATIC_DRAW                  = 0x88e4;\nconst ARRAY_BUFFER                 = 0x8892;\nconst ELEMENT_ARRAY_BUFFER         = 0x8893;\nconst BUFFER_SIZE                  = 0x8764;\n\nconst BYTE                         = 0x1400;\nconst UNSIGNED_BYTE                = 0x1401;\nconst SHORT                        = 0x1402;\nconst UNSIGNED_SHORT               = 0x1403;\nconst INT                          = 0x1404;\nconst UNSIGNED_INT                 = 0x1405;\nconst FLOAT                        = 0x1406;\n\n/**\n * Low level attribute and buffer related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/attributes\n */\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */\nconst defaults = {\n  attribPrefix: \"\",\n};\n\n/**\n * Sets the default attrib prefix\n *\n * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n * In other words I'll create arrays of geometry like this\n *\n *     var arrays = {\n *       position: ...\n *       normal: ...\n *       texcoord: ...\n *     };\n *\n * But need those mapped to attributes and my attributes start with `a_`.\n *\n * @deprecated see {@link module:twgl.setDefaults}\n * @param {string} prefix prefix for attribs\n * @memberOf module:twgl/attributes\n */\nfunction setAttributePrefix(prefix) {\n  defaults.attribPrefix = prefix;\n}\n\nfunction setDefaults(newDefaults) {\n  helper.copyExistingProperties(newDefaults, defaults);\n}\n\nfunction setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n  gl.bindBuffer(type, buffer);\n  gl.bufferData(type, array, drawType || STATIC_DRAW);\n}\n\n/**\n * Given typed array creates a WebGLBuffer and copies the typed array\n * into it.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n * @return {WebGLBuffer} the created WebGLBuffer\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromTypedArray(gl, typedArray, type, drawType) {\n  if (helper.isBuffer(gl, typedArray)) {\n    return typedArray;\n  }\n  type = type || ARRAY_BUFFER;\n  const buffer = gl.createBuffer();\n  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n  return buffer;\n}\n\nfunction isIndices(name) {\n  return name === \"indices\";\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArrayType === Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\nfunction getArray(array) {\n  return array.length ? array : array.data;\n}\n\nconst texcoordRE = /coord|texture/i;\nconst colorRE = /color|colour/i;\n\nfunction guessNumComponentsFromName(name, length) {\n  let numComponents;\n  if (texcoordRE.test(name)) {\n    numComponents = 2;\n  } else if (colorRE.test(name)) {\n    numComponents = 4;\n  } else {\n    numComponents = 3;  // position, normals, indices ...\n  }\n\n  if (length % numComponents > 0) {\n    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\n  }\n\n  return numComponents;\n}\n\nfunction getNumComponents(array, arrayName, numValues) {\n  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues || getArray(array).length);\n}\n\nfunction makeTypedArray(array, name) {\n  if (typedArrays.isArrayBuffer(array)) {\n    return array;\n  }\n\n  if (typedArrays.isArrayBuffer(array.data)) {\n    return array.data;\n  }\n\n  if (Array.isArray(array)) {\n    array = {\n      data: array,\n    };\n  }\n\n  let Type = array.type ? typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type) : undefined;\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint16Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n  return new Type(array.data);\n}\n\nfunction glTypeFromGLTypeOrTypedArrayType(glTypeOrTypedArrayCtor) {\n  return typeof glTypeOrTypedArrayCtor === 'number'\n      ? glTypeOrTypedArrayCtor\n      : glTypeOrTypedArrayCtor ? typedArrays.getGLTypeForTypedArrayType(glTypeOrTypedArrayCtor) : FLOAT;\n}\n\nfunction typedArrayTypeFromGLTypeOrTypedArrayCtor(glTypeOrTypedArrayCtor) {\n  return typeof glTypeOrTypedArrayCtor === 'number'\n      ? typedArrays.getTypedArrayTypeForGLType(glTypeOrTypedArrayCtor)\n      : glTypeOrTypedArrayCtor || Float32Array;\n}\n\nfunction attribBufferFromBuffer(gl, array/*, arrayName */) {\n  return {\n    buffer: array.buffer,\n    numValues: 2 * 3 * 4,  // safely divided by 2, 3, 4\n    type: glTypeFromGLTypeOrTypedArrayType(array.type),\n    arrayType: typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type),\n  };\n}\n\nfunction attribBufferFromSize(gl, array/*, arrayName*/) {\n  const numValues = array.data || array;\n  const arrayType = typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type);\n  const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(ARRAY_BUFFER, buffer);\n  gl.bufferData(ARRAY_BUFFER, numBytes, array.drawType || STATIC_DRAW);\n  return {\n    buffer,\n    numValues,\n    type: typedArrays.getGLTypeForTypedArrayType(arrayType),\n    arrayType,\n  };\n}\n\nfunction attribBufferFromArrayLike(gl, array, arrayName) {\n  const typedArray = makeTypedArray(array, arrayName);\n  return {\n    arrayType: typedArray.constructor,\n    buffer: createBufferFromTypedArray(gl, typedArray, undefined, array.drawType),\n    type: typedArrays.getGLTypeForTypedArray(typedArray),\n    numValues: 0,\n  };\n}\n\n/**\n * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n * for the attribute.\n *\n * @typedef {Object} AttribInfo\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {number} [numComponents] the number of components for this attribute.\n * @property {number} [size] synonym for `numComponents`.\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n * @property {number} [offset] offset into buffer in bytes. Default = 0\n * @property {number} [stride] the stride in bytes per element. Default = 0\n * @property {number} [divisor] the divisor in instances. Default = 0.\n *    Requires WebGL2 or the ANGLE_instanced_arrays extension.\n *    and, if you're using WebGL1 you must have called {@link module:twgl.addExtensionsToContext}\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * @typedef {(Int8ArrayConstructor|Uint8ArrayConstructor|Int16ArrayConstructor|Uint16ArrayConstructor|Int32ArrayConstructor|Uint32ArrayConstructor|Float32ArrayConstructor)} TypedArrayConstructor\n */\n\n/**\n * Use this type of array spec when TWGL can't guess the type or number of components of an array\n * @typedef {Object} FullArraySpec\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {(number|number[]|ArrayBufferView)} [data] The data of the array. A number alone becomes the number of elements of type.\n * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n *    If `coord` is in the name assumes `numComponents = 2`.\n *    If `color` is in the name assumes `numComponents = 4`.\n *    otherwise assumes `numComponents = 3`\n * @property {number|TypedArrayConstructor} [type] type. This is used if `data` is a JavaScript array, or `buffer` is passed in, or `data` is a number.\n *   It can either be the constructor for a typedarray. (eg. `Uint8Array`) OR a WebGL type, (eg `gl.UNSIGNED_BYTE`).\n *   For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: gl.UNSIGNED_BYTE, data: [255,0,255,255, ...], }`.\n * @property {number} [size] synonym for `numComponents`.\n * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = 0.\n *     Requires WebGL2 or the ANGLE_instanced_arrays extension.\n *     and, if you using WebGL1 you must have called {@link module:twgl.addExtensionsToContext}\n * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n * @property {string} [name] synonym for `attrib`.\n * @property {string} [attribName] synonym for `attrib`.\n * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer\n *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`\n *    to provide this. Example:\n *\n *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {\n *           position: [1, 2, 3, ... ],\n *         });\n *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {\n *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1\n *         });\n *\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * An individual array in {@link module:twgl.Arrays}\n *\n * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`\n * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n *\n * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec\n * @memberOf module:twgl\n */\n\n/**\n * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n * @memberOf module:twgl\n */\n\n\n/**\n * Creates a set of attribute data and WebGLBuffers from set of arrays\n *\n * Given\n *\n *      var arrays = {\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *      };\n *\n * returns something like\n *\n *      var attribs = {\n *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n *      };\n *\n * notes:\n *\n * *   Arrays can take various forms\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * @param {WebGLRenderingContext} gl The webgl rendering context.\n * @param {module:twgl.Arrays} arrays The arrays\n * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from\n *   This lets you share buffers. Any arrays you supply will override\n *   the buffers from srcBufferInfo.\n * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n * @memberOf module:twgl/attributes\n */\nfunction createAttribsFromArrays(gl, arrays) {\n  const attribs = {};\n  Object.keys(arrays).forEach(function(arrayName) {\n    if (!isIndices(arrayName)) {\n      const array = arrays[arrayName];\n      const attribName = array.attrib || array.name || array.attribName || (defaults.attribPrefix + arrayName);\n      if (array.value) {\n        if (!Array.isArray(array.value) && !typedArrays.isArrayBuffer(array.value)) {\n          throw new Error('array.value is not array or typedarray');\n        }\n        attribs[attribName] = {\n          value: array.value,\n        };\n      } else {\n        let fn;\n        if (array.buffer && array.buffer instanceof WebGLBuffer) {\n          fn = attribBufferFromBuffer;\n        } else if (typeof array === \"number\" || typeof array.data === \"number\") {\n          fn = attribBufferFromSize;\n        } else {\n          fn = attribBufferFromArrayLike;\n        }\n        const {buffer, type, numValues, arrayType} = fn(gl, array, arrayName);\n        const normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\n        const numComponents = getNumComponents(array, arrayName, numValues);\n        attribs[attribName] = {\n          buffer:        buffer,\n          numComponents: numComponents,\n          type:          type,\n          normalize:     normalization,\n          stride:        array.stride || 0,\n          offset:        array.offset || 0,\n          divisor:       array.divisor === undefined ? undefined : array.divisor,\n          drawType:      array.drawType,\n        };\n      }\n    }\n  });\n  gl.bindBuffer(ARRAY_BUFFER, null);\n  return attribs;\n}\n\n/**\n * Sets the contents of a buffer attached to an attribInfo\n *\n * This is helper function to dynamically update a buffer.\n *\n * Let's say you make a bufferInfo\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n *  And you want to dynamically update the positions. You could do this\n *\n *     // assuming arrays.position has already been updated with new data.\n *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n *\n * @param {WebGLRenderingContext} gl\n * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n *   the name of the attribute will include the prefix.\n * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything\n *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n *    for the portion of the array you want to use.\n *\n *        var someArray = new Float32Array(1000); // an array with 1000 floats\n *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n *\n *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n * @memberOf module:twgl/attributes\n */\nfunction setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n  array = makeTypedArray(array);\n  if (offset !== undefined) {\n    gl.bindBuffer(ARRAY_BUFFER, attribInfo.buffer);\n    gl.bufferSubData(ARRAY_BUFFER, offset, array);\n  } else {\n    setBufferFromTypedArray(gl, ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);\n  }\n}\n\nfunction getBytesPerValueForGLType(gl, type) {\n  if (type === BYTE)           return 1;  // eslint-disable-line\n  if (type === UNSIGNED_BYTE)  return 1;  // eslint-disable-line\n  if (type === SHORT)          return 2;  // eslint-disable-line\n  if (type === UNSIGNED_SHORT) return 2;  // eslint-disable-line\n  if (type === INT)            return 4;  // eslint-disable-line\n  if (type === UNSIGNED_INT)   return 4;  // eslint-disable-line\n  if (type === FLOAT)          return 4;  // eslint-disable-line\n  return 0;\n}\n\n// Tries to get the number of elements from a set of arrays.\nconst positionKeys = ['position', 'positions', 'a_position'];\nfunction getNumElementsFromNonIndexedArrays(arrays) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in arrays) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(arrays)[0];\n  }\n  const array = arrays[key];\n  const length = getArray(array).length;\n  if (length === undefined) {\n    return 1;   // There's no arrays\n  }\n  const numComponents = getNumComponents(array, key);\n  const numElements = length / numComponents;\n  if (length % numComponents > 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\nfunction getNumElementsFromAttributes(gl, attribs) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in attribs) {\n      break;\n    }\n    key = defaults.attribPrefix + key;\n    if (key in attribs) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(attribs)[0];\n  }\n  const attrib = attribs[key];\n  if (!attrib.buffer) {\n    return 1; // There's no buffer\n  }\n  gl.bindBuffer(ARRAY_BUFFER, attrib.buffer);\n  const numBytes = gl.getBufferParameter(ARRAY_BUFFER, BUFFER_SIZE);\n  gl.bindBuffer(ARRAY_BUFFER, null);\n\n  const bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\n  const totalElements = numBytes / bytesPerValue;\n  const numComponents = attrib.numComponents || attrib.size;\n  // TODO: check stride\n  const numElements = totalElements / numComponents;\n  if (numElements % 1 !== 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\n/**\n * @typedef {Object} BufferInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`\n * @memberOf module:twgl\n */\n\n/**\n * Creates a BufferInfo from an object of arrays.\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * Given an object like\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n *  Creates an BufferInfo like this\n *\n *     bufferInfo = {\n *       numElements: 4,        // or whatever the number of elements is\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n *       attribs: {\n *         position: { buffer: WebGLBuffer, numComponents: 3, },\n *         normal:   { buffer: WebGLBuffer, numComponents: 3, },\n *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n *       },\n *     };\n *\n *  The properties of arrays can be JavaScript arrays in which case the number of components\n *  will be guessed.\n *\n *     var arrays = {\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n *        indices:  [0, 1, 2, 1, 2, 3],\n *     };\n *\n *  They can also be TypedArrays\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *\n *  Or AugmentedTypedArrays\n *\n *     var positions = createAugmentedTypedArray(3, 4);\n *     var texcoords = createAugmentedTypedArray(2, 4);\n *     var normals   = createAugmentedTypedArray(3, 4);\n *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n *\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n *     indices.push([0, 1, 2, 1, 2, 3]);\n *\n *     var arrays = {\n *        position: positions,\n *        texcoord: texcoords,\n *        normal:   normals,\n *        indices:  indices,\n *     };\n *\n * For the last example it is equivalent to\n *\n *     var bufferInfo = {\n *       attribs: {\n *         position: { numComponents: 3, buffer: gl.createBuffer(), },\n *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },\n *         normal: { numComponents: 3, buffer: gl.createBuffer(), },\n *       },\n *       indices: gl.createBuffer(),\n *       numElements: 6,\n *     };\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.Arrays} arrays Your data\n * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing\n *        buffer info to start from. WebGLBuffers etc specified\n *        in the srcBufferInfo will be used in a new BufferInfo\n *        with any arrays specified overriding the ones in\n *        srcBufferInfo.\n * @return {module:twgl.BufferInfo} A BufferInfo\n * @memberOf module:twgl/attributes\n */\nfunction createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {\n  const newAttribs = createAttribsFromArrays(gl, arrays);\n  const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});\n  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);\n  const indices = arrays.indices;\n  if (indices) {\n    const newIndices = makeTypedArray(indices, \"indices\");\n    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER);\n    bufferInfo.numElements = newIndices.length;\n    bufferInfo.elementType = typedArrays.getGLTypeForTypedArray(newIndices);\n  } else if (!bufferInfo.numElements) {\n    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\n  }\n\n  return bufferInfo;\n}\n\n/**\n * Creates a buffer from an array, typed array, or array spec\n *\n * Given something like this\n *\n *     [1, 2, 3],\n *\n * or\n *\n *     new Uint16Array([1,2,3]);\n *\n * or\n *\n *     {\n *        data: [1, 2, 3],\n *        type: Uint8Array,\n *     }\n *\n * returns a WebGLBuffer that contains the given data.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.\n * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromArray(gl, array, arrayName) {\n  const type = arrayName === \"indices\" ? ELEMENT_ARRAY_BUFFER : ARRAY_BUFFER;\n  const typedArray = makeTypedArray(array, arrayName);\n  return createBufferFromTypedArray(gl, typedArray, type);\n}\n\n/**\n * Creates buffers from arrays or typed arrays\n *\n * Given something like this\n *\n *     var arrays = {\n *        positions: [1, 2, 3],\n *        normals: [0, 0, 1],\n *     }\n *\n * returns something like\n *\n *     buffers = {\n *       positions: WebGLBuffer,\n *       normals: WebGLBuffer,\n *     }\n *\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.Arrays} arrays\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n * @memberOf module:twgl/attributes\n */\nfunction createBuffersFromArrays(gl, arrays) {\n  const buffers = { };\n  Object.keys(arrays).forEach(function(key) {\n    buffers[key] = createBufferFromArray(gl, arrays[key], key);\n  });\n\n  // Ugh!\n  if (arrays.indices) {\n    buffers.numElements = arrays.indices.length;\n    buffers.elementType = typedArrays.getGLTypeForTypedArray(makeTypedArray(arrays.indices), 'indices');\n  } else {\n    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n  }\n\n  return buffers;\n}\n\nexport {\n  createAttribsFromArrays,\n  createBuffersFromArrays,\n  createBufferFromArray,\n  createBufferFromTypedArray,\n  createBufferInfoFromArrays,\n  setAttribInfoBufferFromArray,\n\n  setAttributePrefix,\n\n  setDefaults as setAttributeDefaults_,\n  getNumComponents as getNumComponents_,\n  getArray as getArray_,\n};\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as programs from './programs.js';\n\nconst TRIANGLES                      = 0x0004;\nconst UNSIGNED_SHORT                 = 0x1403;\n\n/**\n * Drawing related functions\n *\n * For backward compatibility they are available at both `twgl.draw` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/draw\n */\n\n/**\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n *\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n * but calling this means if you switch from indexed data to non-indexed\n * data you don't have to remember to update your draw call.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n * @param {number} [offset] An optional offset. Defaults to 0.\n * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called\n * @memberOf module:twgl/draw\n */\nfunction drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {\n  type = type === undefined ? TRIANGLES : type;\n  const indices = bufferInfo.indices;\n  const elementType = bufferInfo.elementType;\n  const numElements = count === undefined ? bufferInfo.numElements : count;\n  offset = offset === undefined ? 0 : offset;\n  if (elementType || indices) {\n    if (instanceCount !== undefined) {\n      gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT : bufferInfo.elementType, offset, instanceCount);\n    } else {\n      gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT : bufferInfo.elementType, offset);\n    }\n  } else {\n    if (instanceCount !== undefined) {\n      gl.drawArraysInstanced(type, offset, numElements, instanceCount);\n    } else {\n      gl.drawArrays(type, offset, numElements);\n    }\n  }\n}\n\n/**\n * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n *\n * You need either a `BufferInfo` or a `VertexArrayInfo`.\n *\n * @typedef {Object} DrawObject\n * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`\n * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @property {Object<string, ?>} uniforms The values for the uniforms.\n *   You can pass multiple objects by putting them in an array. For example\n *\n *     var sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     var localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     var drawObj = {\n *       ...\n *       uniforms: [sharedUniforms, localUniforms],\n *     };\n *\n * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.\n * @property {number} [instanceCount] the number of instances. Defaults to undefined.\n * @memberOf module:twgl\n */\n\n/**\n * Draws a list of objects\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n * @memberOf module:twgl/draw\n */\nfunction drawObjectList(gl, objectsToDraw) {\n  let lastUsedProgramInfo = null;\n  let lastUsedBufferInfo = null;\n\n  objectsToDraw.forEach(function(object) {\n    if (object.active === false) {\n      return;\n    }\n\n    const programInfo = object.programInfo;\n    const bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n    let bindBuffers = false;\n    const type = object.type === undefined ? TRIANGLES : object.type;\n\n    if (programInfo !== lastUsedProgramInfo) {\n      lastUsedProgramInfo = programInfo;\n      gl.useProgram(programInfo.program);\n\n      // We have to rebind buffers when changing programs because we\n      // only bind buffers the program uses. So if 2 programs use the same\n      // bufferInfo but the 1st one uses only positions the when the\n      // we switch to the 2nd one some of the attributes will not be on.\n      bindBuffers = true;\n    }\n\n    // Setup all the needed attributes.\n    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n        gl.bindVertexArray(null);\n      }\n      lastUsedBufferInfo = bufferInfo;\n      programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);\n    }\n\n    // Set the uniforms.\n    programs.setUniforms(programInfo, object.uniforms);\n\n    // Draw\n    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);\n  });\n\n  if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {\n    gl.bindVertexArray(null);\n  }\n}\n\nexport {\n  drawBufferInfo,\n  drawObjectList,\n};\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as textures from './textures.js';\nimport * as helper from './helper.js';\n\n/**\n * Framebuffer related functions\n *\n * For backward compatibility they are available at both `twgl.framebuffer` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/framebuffers\n */\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */\n\nconst FRAMEBUFFER                    = 0x8d40;\nconst RENDERBUFFER                   = 0x8d41;\nconst TEXTURE_2D                     = 0x0de1;\n\nconst UNSIGNED_BYTE                  = 0x1401;\n\n/* PixelFormat */\nconst DEPTH_COMPONENT                = 0x1902;\nconst RGBA                           = 0x1908;\nconst DEPTH_COMPONENT24              = 0x81a6;\nconst DEPTH_COMPONENT32F             = 0x8cac;\nconst DEPTH24_STENCIL8               = 0x88f0;\nconst DEPTH32F_STENCIL8              = 0x8cad;\n\n/* Framebuffer Object. */\nconst RGBA4                          = 0x8056;\nconst RGB5_A1                        = 0x8057;\nconst RGB565                         = 0x8D62;\nconst DEPTH_COMPONENT16              = 0x81A5;\nconst STENCIL_INDEX                  = 0x1901;\nconst STENCIL_INDEX8                 = 0x8D48;\nconst DEPTH_STENCIL                  = 0x84F9;\nconst COLOR_ATTACHMENT0              = 0x8CE0;\nconst DEPTH_ATTACHMENT               = 0x8D00;\nconst STENCIL_ATTACHMENT             = 0x8D20;\nconst DEPTH_STENCIL_ATTACHMENT       = 0x821A;\n\n/* TextureWrapMode */\nconst CLAMP_TO_EDGE                  = 0x812F;\n\n/* TextureMagFilter */\nconst LINEAR                         = 0x2601;\n\n/**\n * The options for a framebuffer attachment.\n *\n * Note: For a `format` that is a texture include all the texture\n * options from {@link module:twgl.TextureOptions} for example\n * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n *\n * @typedef {Object} AttachmentOptions\n * @property {number} [attachmentPoint] The attachment point. Defaults\n *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type\n *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n *   on the format or attachment type.\n * @property {number} [format] The format. If one of `gl.RGBA4`,\n *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n * @property {number} [samples] The number of samples. Default = 1\n * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.\n *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`\n * @property {(WebGLRenderbuffer | WebGLTexture)} [attachment] An existing renderbuffer or texture.\n *    If provided will attach this Object. This allows you to share\n *    attachments across framebuffers.\n * @memberOf module:twgl\n * @mixes module:twgl.TextureOptions\n */\n\nconst defaultAttachments = [\n  { format: RGBA, type: UNSIGNED_BYTE, min: LINEAR, wrap: CLAMP_TO_EDGE, },\n  { format: DEPTH_STENCIL, },\n];\n\nconst attachmentsByFormat = {};\nattachmentsByFormat[DEPTH_STENCIL] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT16] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT24] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT32F] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH24_STENCIL8] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH32F_STENCIL8] = DEPTH_STENCIL_ATTACHMENT;\n\nfunction getAttachmentPointForFormat(format, internalFormat) {\n  return attachmentsByFormat[format] || attachmentsByFormat[internalFormat];\n}\n\nconst renderbufferFormats = {};\nrenderbufferFormats[RGBA4] = true;\nrenderbufferFormats[RGB5_A1] = true;\nrenderbufferFormats[RGB565] = true;\nrenderbufferFormats[DEPTH_STENCIL] = true;\nrenderbufferFormats[DEPTH_COMPONENT16] = true;\nrenderbufferFormats[STENCIL_INDEX] = true;\nrenderbufferFormats[STENCIL_INDEX8] = true;\n\nfunction isRenderbufferFormat(format) {\n  return renderbufferFormats[format];\n}\n\nconst MAX_COLOR_ATTACHMENT_POINTS = 32;  // even an 3090 only supports 8 but WebGL/OpenGL ES define constants for 32\n\nfunction isColorAttachmentPoint(attachmentPoint) {\n  return attachmentPoint >= COLOR_ATTACHMENT0 && attachmentPoint < COLOR_ATTACHMENT0 + MAX_COLOR_ATTACHMENT_POINTS;\n}\n\n/**\n * @typedef {Object} FramebufferInfo\n * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n * @property {Array.<(WebGLRenderbuffer | WebGLTexture)>} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n * @property {number} width The width of the framebuffer and its attachments\n * @property {number} height The width of the framebuffer and its attachments\n * @memberOf module:twgl\n */\n\n/**\n * Creates a framebuffer and attachments.\n *\n * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n * It also leaves the framebuffer it just created as the currently bound `FRAMEBUFFER`.\n * Note: If this is WebGL2 or if you called {@link module:twgl.addExtensionsToContext} then it will set the drawBuffers\n * to `[COLOR_ATTACHMENT0, COLOR_ATTACHMENT1, ...]` for how ever many color attachments were created.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n * Passing in a specific size\n *\n *     const width = 256;\n *     const height = 256;\n *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n *\n * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n * @memberOf module:twgl/framebuffers\n */\nfunction createFramebufferInfo(gl, attachments, width, height) {\n  const target = FRAMEBUFFER;\n  const fb = gl.createFramebuffer();\n  gl.bindFramebuffer(target, fb);\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  attachments = attachments || defaultAttachments;\n  const usedColorAttachmentsPoints = [];\n  const framebufferInfo = {\n    framebuffer: fb,\n    attachments: [],\n    width: width,\n    height: height,\n  };\n\n  attachments.forEach(function(attachmentOptions, i) {\n    let attachment = attachmentOptions.attachment;\n    const samples = attachmentOptions.samples;\n    const format = attachmentOptions.format;\n    let attachmentPoint = attachmentOptions.attachmentPoint || getAttachmentPointForFormat(format, attachmentOptions.internalFormat);\n    if (!attachmentPoint) {\n      attachmentPoint = COLOR_ATTACHMENT0 + i;\n    }\n    if (isColorAttachmentPoint(attachmentPoint)) {\n      usedColorAttachmentsPoints.push(attachmentPoint);\n    }\n    if (!attachment) {\n      if (samples !== undefined || isRenderbufferFormat(format)) {\n        attachment = gl.createRenderbuffer();\n        gl.bindRenderbuffer(RENDERBUFFER, attachment);\n        if (samples > 1) {\n          gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\n        } else {\n          gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n        }\n      } else {\n        const textureOptions = Object.assign({}, attachmentOptions);\n        textureOptions.width = width;\n        textureOptions.height = height;\n        if (textureOptions.auto === undefined) {\n          textureOptions.auto = false;\n          textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR;\n          textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR;\n          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE;\n          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE;\n        }\n        attachment = textures.createTexture(gl, textureOptions);\n      }\n    }\n    if (helper.isRenderbuffer(gl, attachment)) {\n      gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);\n    } else if (helper.isTexture(gl, attachment)) {\n      if (attachmentOptions.layer !== undefined) {\n        gl.framebufferTextureLayer(\n          target,\n          attachmentPoint,\n          attachment,\n          attachmentOptions.level || 0,\n          attachmentOptions.layer);\n      } else {\n        gl.framebufferTexture2D(\n            target,\n            attachmentPoint,\n            attachmentOptions.target || TEXTURE_2D,\n            attachment,\n            attachmentOptions.level || 0);\n      }\n    } else {\n      throw new Error('unknown attachment type');\n    }\n    framebufferInfo.attachments.push(attachment);\n  });\n  if (gl.drawBuffers) {\n    gl.drawBuffers(usedColorAttachmentsPoints);\n  }\n  return framebufferInfo;\n}\n\n/**\n * Resizes the attachments of a framebuffer.\n *\n * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n * because TWGL has no idea the format/type of each attachment.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments\n *         twgl.resizeFramebufferInfo(gl, fbi);\n *       }\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments to match\n *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n *       }\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @memberOf module:twgl/framebuffers\n */\nfunction resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  framebufferInfo.width = width;\n  framebufferInfo.height = height;\n  attachments = attachments || defaultAttachments;\n  attachments.forEach(function(attachmentOptions, ndx) {\n    const attachment = framebufferInfo.attachments[ndx];\n    const format = attachmentOptions.format;\n    const samples = attachmentOptions.samples;\n    if (samples !== undefined || helper.isRenderbuffer(gl, attachment)) {\n      gl.bindRenderbuffer(RENDERBUFFER, attachment);\n      if (samples > 1) {\n        gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\n      } else {\n        gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n      }\n    } else if (helper.isTexture(gl, attachment)) {\n      textures.resizeTexture(gl, attachment, attachmentOptions, width, height);\n    } else {\n      throw new Error('unknown attachment type');\n    }\n  });\n}\n\n/**\n * Binds a framebuffer\n *\n * This function pretty much solely exists because I spent hours\n * trying to figure out why something I wrote wasn't working only\n * to realize I forget to set the viewport dimensions.\n * My hope is this function will fix that.\n *\n * It is effectively the same as\n *\n *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n *   If falsy will bind the canvas.\n * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n * @memberOf module:twgl/framebuffers\n */\n\nfunction bindFramebufferInfo(gl, framebufferInfo, target) {\n  target = target || FRAMEBUFFER;\n  if (framebufferInfo) {\n    gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n  } else {\n    gl.bindFramebuffer(target, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n}\n\nexport {\n  bindFramebufferInfo,\n  createFramebufferInfo,\n  resizeFramebufferInfo,\n};\n\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint no-console: \"off\" */\n\n/**\n * Copy named properties\n *\n * @param {string[]} names names of properties to copy\n * @param {object} src object to copy properties from\n * @param {object} dst object to copy properties to\n * @private\n */\nfunction copyNamedProperties(names, src, dst) {\n  names.forEach(function(name) {\n    const value = src[name];\n    if (value !== undefined) {\n      dst[name] = value;\n    }\n  });\n}\n\n/**\n * Copies properties from source to dest only if a matching key is in dest\n *\n * @param {Object.<string, ?>} src the source\n * @param {Object.<string, ?>} dst the dest\n * @private\n */\nfunction copyExistingProperties(src, dst) {\n  Object.keys(dst).forEach(function(key) {\n    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {  /* eslint no-prototype-builtins: 0 */\n      dst[key] = src[key];\n    }\n  });\n}\n\nfunction error(...args) {\n  console.error(...args);\n}\n\nfunction warn(...args) {\n  console.warn(...args);\n}\n\nconst isTypeWeakMaps = new Map();\n\nfunction isType(object, type) {\n  if (!object || typeof object !== 'object') {\n    return false;\n  }\n  let weakMap = isTypeWeakMaps.get(type);\n  if (!weakMap) {\n    weakMap = new WeakMap();\n    isTypeWeakMaps.set(type, weakMap);\n  }\n  let isOfType = weakMap.get(object);\n  if (isOfType === undefined) {\n    const s = Object.prototype.toString.call(object);\n    isOfType = s.substring(8, s.length - 1) === type;\n    weakMap.set(object, isOfType);\n  }\n  return isOfType;\n}\n\nfunction isBuffer(gl, t) {\n  return typeof WebGLBuffer !== 'undefined' && isType(t, 'WebGLBuffer');\n}\n\nfunction isRenderbuffer(gl, t) {\n  return typeof WebGLRenderbuffer !== 'undefined' && isType(t, 'WebGLRenderbuffer');\n}\n\nfunction isShader(gl, t) {\n  return typeof WebGLShader !== 'undefined' && isType(t, 'WebGLShader');\n}\n\nfunction isTexture(gl, t) {\n  return typeof WebGLTexture !== 'undefined' && isType(t, 'WebGLTexture');\n}\n\nfunction isSampler(gl, t) {\n  return typeof WebGLSampler !== 'undefined' && isType(t, 'WebGLSampler');\n}\n\nexport {\n  copyExistingProperties,\n  copyNamedProperties,\n  error,\n  warn,\n  isBuffer,\n  isRenderbuffer,\n  isShader,\n  isTexture,\n  isSampler,\n};\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as utils from './utils.js';\nimport * as helper from './helper.js';\n\n/**\n * Low level shader program related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.programs` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/programs\n */\n\nconst error = helper.error;\nconst warn = helper.warn;\nfunction getElementById(id) {\n  return (typeof document !== 'undefined' && document.getElementById)\n      ? document.getElementById(id)\n      : null;\n}\n\nconst TEXTURE0                       = 0x84c0;\nconst DYNAMIC_DRAW                   = 0x88e8;\n\nconst ARRAY_BUFFER                   = 0x8892;\nconst ELEMENT_ARRAY_BUFFER           = 0x8893;\nconst UNIFORM_BUFFER                 = 0x8a11;\nconst TRANSFORM_FEEDBACK_BUFFER      = 0x8c8e;\n\nconst TRANSFORM_FEEDBACK             = 0x8e22;\n\nconst COMPILE_STATUS                 = 0x8b81;\nconst LINK_STATUS                    = 0x8b82;\nconst FRAGMENT_SHADER                = 0x8b30;\nconst VERTEX_SHADER                  = 0x8b31;\nconst SEPARATE_ATTRIBS               = 0x8c8d;\n\nconst ACTIVE_UNIFORMS                = 0x8b86;\nconst ACTIVE_ATTRIBUTES              = 0x8b89;\nconst TRANSFORM_FEEDBACK_VARYINGS    = 0x8c83;\nconst ACTIVE_UNIFORM_BLOCKS          = 0x8a36;\nconst UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = 0x8a44;\nconst UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;\nconst UNIFORM_BLOCK_DATA_SIZE                     = 0x8a40;\nconst UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = 0x8a43;\n\nconst FLOAT                         = 0x1406;\nconst FLOAT_VEC2                    = 0x8B50;\nconst FLOAT_VEC3                    = 0x8B51;\nconst FLOAT_VEC4                    = 0x8B52;\nconst INT                           = 0x1404;\nconst INT_VEC2                      = 0x8B53;\nconst INT_VEC3                      = 0x8B54;\nconst INT_VEC4                      = 0x8B55;\nconst BOOL                          = 0x8B56;\nconst BOOL_VEC2                     = 0x8B57;\nconst BOOL_VEC3                     = 0x8B58;\nconst BOOL_VEC4                     = 0x8B59;\nconst FLOAT_MAT2                    = 0x8B5A;\nconst FLOAT_MAT3                    = 0x8B5B;\nconst FLOAT_MAT4                    = 0x8B5C;\nconst SAMPLER_2D                    = 0x8B5E;\nconst SAMPLER_CUBE                  = 0x8B60;\nconst SAMPLER_3D                    = 0x8B5F;\nconst SAMPLER_2D_SHADOW             = 0x8B62;\nconst FLOAT_MAT2x3                  = 0x8B65;\nconst FLOAT_MAT2x4                  = 0x8B66;\nconst FLOAT_MAT3x2                  = 0x8B67;\nconst FLOAT_MAT3x4                  = 0x8B68;\nconst FLOAT_MAT4x2                  = 0x8B69;\nconst FLOAT_MAT4x3                  = 0x8B6A;\nconst SAMPLER_2D_ARRAY              = 0x8DC1;\nconst SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;\nconst SAMPLER_CUBE_SHADOW           = 0x8DC5;\nconst UNSIGNED_INT                  = 0x1405;\nconst UNSIGNED_INT_VEC2             = 0x8DC6;\nconst UNSIGNED_INT_VEC3             = 0x8DC7;\nconst UNSIGNED_INT_VEC4             = 0x8DC8;\nconst INT_SAMPLER_2D                = 0x8DCA;\nconst INT_SAMPLER_3D                = 0x8DCB;\nconst INT_SAMPLER_CUBE              = 0x8DCC;\nconst INT_SAMPLER_2D_ARRAY          = 0x8DCF;\nconst UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;\nconst UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;\nconst UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;\nconst UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\n\nconst TEXTURE_2D                    = 0x0DE1;\nconst TEXTURE_CUBE_MAP              = 0x8513;\nconst TEXTURE_3D                    = 0x806F;\nconst TEXTURE_2D_ARRAY              = 0x8C1A;\n\nconst typeMap = {};\n\n/**\n * Returns the corresponding bind point for a given sampler type\n * @private\n */\nfunction getBindPointForSamplerType(gl, type) {\n  return typeMap[type].bindPoint;\n}\n\n// This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n// this code could be a lot smaller but that is sadly really slow (T_T)\n\nfunction floatSetter(gl, location) {\n  return function(v) {\n    gl.uniform1f(location, v);\n  };\n}\n\nfunction floatArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1fv(location, v);\n  };\n}\n\nfunction floatVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2fv(location, v);\n  };\n}\n\nfunction floatVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3fv(location, v);\n  };\n}\n\nfunction floatVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4fv(location, v);\n  };\n}\n\nfunction intSetter(gl, location) {\n  return function(v) {\n    gl.uniform1i(location, v);\n  };\n}\n\nfunction intArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1iv(location, v);\n  };\n}\n\nfunction intVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2iv(location, v);\n  };\n}\n\nfunction intVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3iv(location, v);\n  };\n}\n\nfunction intVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4iv(location, v);\n  };\n}\n\nfunction uintSetter(gl, location) {\n  return function(v) {\n    gl.uniform1ui(location, v);\n  };\n}\n\nfunction uintArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1uiv(location, v);\n  };\n}\n\nfunction uintVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2uiv(location, v);\n  };\n}\n\nfunction uintVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3uiv(location, v);\n  };\n}\n\nfunction uintVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4uiv(location, v);\n  };\n}\n\nfunction floatMat2Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2fv(location, false, v);\n  };\n}\n\nfunction floatMat3Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3fv(location, false, v);\n  };\n}\n\nfunction floatMat4Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4fv(location, false, v);\n  };\n}\n\nfunction floatMat23Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x3fv(location, false, v);\n  };\n}\n\nfunction floatMat32Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x2fv(location, false, v);\n  };\n}\n\nfunction floatMat24Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x4fv(location, false, v);\n  };\n}\n\nfunction floatMat42Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x2fv(location, false, v);\n  };\n}\n\nfunction floatMat34Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x4fv(location, false, v);\n  };\n}\n\nfunction floatMat43Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x3fv(location, false, v);\n  };\n}\n\nfunction samplerSetter(gl, type, unit, location) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  return utils.isWebGL2(gl) ? function(textureOrPair) {\n    let texture;\n    let sampler;\n    if (!textureOrPair || helper.isTexture(gl, textureOrPair)) {\n      texture = textureOrPair;\n      sampler = null;\n    } else {\n      texture = textureOrPair.texture;\n      sampler = textureOrPair.sampler;\n    }\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n    gl.bindSampler(unit, sampler);\n  } : function(texture) {\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n  };\n}\n\nfunction samplerArraySetter(gl, type, unit, location, size) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  const units = new Int32Array(size);\n  for (let ii = 0; ii < size; ++ii) {\n    units[ii] = unit + ii;\n  }\n\n  return utils.isWebGL2(gl) ? function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(textureOrPair, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      let texture;\n      let sampler;\n      if (!textureOrPair || helper.isTexture(gl, textureOrPair)) {\n        texture = textureOrPair;\n        sampler = null;\n      } else {\n        texture = textureOrPair.texture;\n        sampler = textureOrPair.sampler;\n      }\n      gl.bindSampler(unit, sampler);\n      gl.bindTexture(bindPoint, texture);\n    });\n  } : function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(texture, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      gl.bindTexture(bindPoint, texture);\n    });\n  };\n}\n\ntypeMap[FLOAT]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };\ntypeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  cols: 2, };\ntypeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  cols: 3, };\ntypeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  cols: 4, };\ntypeMap[INT]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[UNSIGNED_INT]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };\ntypeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   cols: 2, };\ntypeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   cols: 3, };\ntypeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   cols: 4, };\ntypeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 32, setter: floatMat2Setter,  rows: 2, cols: 2, };\ntypeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 48, setter: floatMat3Setter,  rows: 3, cols: 3, };\ntypeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  rows: 4, cols: 4, };\ntypeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 32, setter: floatMat23Setter, rows: 2, cols: 3, };\ntypeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, rows: 2, cols: 4, };\ntypeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 48, setter: floatMat32Setter, rows: 3, cols: 2, };\ntypeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, rows: 3, cols: 4, };\ntypeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 64, setter: floatMat42Setter, rows: 4, cols: 2, };\ntypeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 64, setter: floatMat43Setter, rows: 4, cols: 3, };\ntypeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D,       };\ntypeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D,       };\ntypeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D,       };\ntypeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D,       };\ntypeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\n\nfunction floatAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      switch (b.value.length) {\n        case 4:\n          gl.vertexAttrib4fv(index, b.value);\n          break;\n        case 3:\n          gl.vertexAttrib3fv(index, b.value);\n          break;\n        case 2:\n          gl.vertexAttrib2fv(index, b.value);\n          break;\n        case 1:\n          gl.vertexAttrib1fv(index, b.value);\n          break;\n        default:\n          throw new Error('the length of a float constant value must be between 1 and 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribPointer(\n          index, b.numComponents || b.size, b.type || FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction intAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4iv(index, b.value);\n      } else {\n        throw new Error('The length of an integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || INT, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction uintAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4uiv(index, b.value);\n      } else {\n        throw new Error('The length of an unsigned integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || UNSIGNED_INT, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction matAttribSetter(gl, index, typeInfo) {\n  const defaultSize = typeInfo.size;\n  const count = typeInfo.count;\n\n  return function(b) {\n    gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n    const numComponents = b.size || b.numComponents || defaultSize;\n    const size = numComponents / count;\n    const type = b.type || FLOAT;\n    const typeInfo = typeMap[type];\n    const stride = typeInfo.size * numComponents;\n    const normalize = b.normalize || false;\n    const offset = b.offset || 0;\n    const rowOffset = stride / count;\n    for (let i = 0; i < count; ++i) {\n      gl.enableVertexAttribArray(index + i);\n      gl.vertexAttribPointer(\n          index + i, size, type, normalize, stride, offset + rowOffset * i);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index + i, b.divisor || 0);\n      }\n    }\n  };\n}\n\n\n\nconst attrTypeMap = {};\nattrTypeMap[FLOAT]             = { size:  4, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC2]        = { size:  8, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC3]        = { size: 12, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC4]        = { size: 16, setter: floatAttribSetter, };\nattrTypeMap[INT]               = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC2]          = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC3]          = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC4]          = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[UNSIGNED_INT]      = { size:  4, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC2] = { size:  8, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: uintAttribSetter,  };\nattrTypeMap[BOOL]              = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC2]         = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC3]         = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC4]         = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[FLOAT_MAT2]        = { size:  4, setter: matAttribSetter,   count: 2, };\nattrTypeMap[FLOAT_MAT3]        = { size:  9, setter: matAttribSetter,   count: 3, };\nattrTypeMap[FLOAT_MAT4]        = { size: 16, setter: matAttribSetter,   count: 4, };\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */\n\nconst errorRE = /ERROR:\\s*\\d+:(\\d+)/gi;\nfunction addLineNumbersWithError(src, log = '', lineOffset = 0) {\n  // Note: Error message formats are not defined by any spec so this may or may not work.\n  const matches = [...log.matchAll(errorRE)];\n  const lineNoToErrorMap = new Map(matches.map((m, ndx) => {\n    const lineNo = parseInt(m[1]);\n    const next = matches[ndx + 1];\n    const end = next ? next.index : log.length;\n    const msg = log.substring(m.index, end);\n    return [lineNo - 1, msg];\n  }));\n  return src.split('\\n').map((line, lineNo) => {\n    const err = lineNoToErrorMap.get(lineNo);\n    return `${lineNo + 1 + lineOffset}: ${line}${err ? `\\n\\n^^^ ${err}` : ''}`;\n  }).join('\\n');\n}\n\n/**\n * Error Callback\n * @callback ErrorCallback\n * @param {string} msg error message.\n * @param {number} [lineOffset] amount to add to line number\n * @memberOf module:twgl\n */\n\n/**\n * Program Callback\n * @callback ProgramCallback\n * @param {string} [err] error message, falsy if no error\n * @param {WebGLProgram|module:twgl.ProgramInfo} [result] the program or programInfo\n */\n\nconst spaceRE = /^[ \\t]*\\n/;\n\n/**\n * Remove the first end of line because WebGL 2.0 requires\n * #version 300 es\n * as the first line. No whitespace allowed before that line\n * so\n *\n * <script>\n * #version 300 es\n * </script>\n *\n * Has one line before it which is invalid according to GLSL ES 3.00\n *\n * @param {string} shaderSource The source of the shader\n * @returns {{shaderSource: string, lineOffset: number}}\n * @private\n */\nfunction prepShaderSource(shaderSource) {\n  let lineOffset = 0;\n  if (spaceRE.test(shaderSource)) {\n    lineOffset = 1;\n    shaderSource = shaderSource.replace(spaceRE, '');\n  }\n  return {lineOffset, shaderSource};\n}\n\n/**\n * @param {module:twgl.ProgramOptions} progOptions\n * @param {string} msg\n * @return null\n * @private\n */\nfunction reportError(progOptions, msg) {\n  progOptions.errorCallback(msg);\n  if (progOptions.callback) {\n    setTimeout(() => {\n      progOptions.callback(`${msg}\\n${progOptions.errors.join('\\n')}`);\n    });\n  }\n  return null;\n}\n\n/**\n * Check Shader status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {number} shaderType The shader type\n * @param {WebGLShader} shader The shader\n * @param {ErrorCallback} [errFn] function to receive error message.\n * @return {string} errors or empty string\n * @private\n */\nfunction checkShaderStatus(gl, shaderType, shader, errFn) {\n  errFn = errFn || error;\n  // Check the compile status\n  const compiled = gl.getShaderParameter(shader, COMPILE_STATUS);\n  if (!compiled) {\n    // Something went wrong during compilation; get the error\n    const lastError = gl.getShaderInfoLog(shader);\n    const {lineOffset, shaderSource} = prepShaderSource(gl.getShaderSource(shader));\n    const error = `${addLineNumbersWithError(shaderSource, lastError, lineOffset)}\\nError compiling ${utils.glEnumToString(gl, shaderType)}: ${lastError}`;\n    errFn(error);\n    return error;\n  }\n  return '';\n}\n\n/**\n * @typedef {Object} FullProgramSpec\n * @property {string[]} shaders the shader source or element ids.\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>|string[]} [attribLocations] a attribute name to location map, or array of attribute names where index = location.\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @property {ProgramCallback} [callback] callback for async program compilation.\n * @memberOf module:twgl\n */\n\n/**\n * @typedef {string[]|module:twgl.FullProgramSpec} ProgramSpec\n * @memberOf module:twgl\n */\n\n/**\n * @typedef {Object} ProgramOptions\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>|string[]} [attribLocations] a attribute name to location map, or array of attribute names where index = location.\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @property {ProgramCallback} [callback] callback for async program compilation.\n * @memberOf module:twgl\n */\n\n/**\n * Gets the program options based on all these optional arguments\n * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in\n * @private\n */\nfunction getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n  let transformFeedbackVaryings;\n  let transformFeedbackMode;\n  let callback;\n  if (typeof opt_locations === 'function') {\n    opt_errorCallback = opt_locations;\n    opt_locations = undefined;\n  }\n  if (typeof opt_attribs === 'function') {\n    opt_errorCallback = opt_attribs;\n    opt_attribs = undefined;\n  } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n    const opt = opt_attribs;\n    opt_errorCallback = opt.errorCallback;\n    opt_attribs = opt.attribLocations;\n    transformFeedbackVaryings = opt.transformFeedbackVaryings;\n    transformFeedbackMode = opt.transformFeedbackMode;\n    callback = opt.callback;\n  }\n\n  const errorCallback = opt_errorCallback || error;\n  const errors = [];\n  const options = {\n    errorCallback(msg, ...args) {\n      errors.push(msg);\n      errorCallback(msg, ...args);\n    },\n    transformFeedbackVaryings,\n    transformFeedbackMode,\n    callback,\n    errors,\n  };\n\n  {\n    let attribLocations = {};\n    if (Array.isArray(opt_attribs)) {\n      opt_attribs.forEach(function(attrib,  ndx) {\n        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n      });\n    } else {\n      attribLocations = opt_attribs || {};\n    }\n    options.attribLocations = attribLocations;\n  }\n\n  return options;\n}\n\nconst defaultShaderType = [\n  \"VERTEX_SHADER\",\n  \"FRAGMENT_SHADER\",\n];\n\nfunction getShaderTypeFromScriptType(gl, scriptType) {\n  if (scriptType.indexOf(\"frag\") >= 0) {\n    return FRAGMENT_SHADER;\n  } else if (scriptType.indexOf(\"vert\") >= 0) {\n    return VERTEX_SHADER;\n  }\n  return undefined;\n}\n\nfunction deleteProgramAndShaders(gl, program, notThese) {\n  const shaders = gl.getAttachedShaders(program);\n  for (const shader of shaders) {\n    if (notThese.has(shader)) {\n      gl.deleteShader(shader);\n    }\n  }\n  gl.deleteProgram(program);\n}\n\nconst wait = (ms = 0) => new Promise(resolve => setTimeout(resolve, ms));\n\nfunction createProgramNoCheck(gl, shaders, programOptions) {\n  const program = gl.createProgram();\n  const {\n    attribLocations,\n    transformFeedbackVaryings,\n    transformFeedbackMode,\n  } = getProgramOptions(programOptions);\n\n  for (let ndx = 0; ndx < shaders.length; ++ndx) {\n    let shader = shaders[ndx];\n    if (typeof shader === 'string') {\n      const elem = getElementById(shader);\n      const src = elem ? elem.text : shader;\n      let type = gl[defaultShaderType[ndx]];\n      if (elem && elem.type) {\n        type = getShaderTypeFromScriptType(gl, elem.type) || type;\n      }\n      shader = gl.createShader(type);\n      gl.shaderSource(shader, prepShaderSource(src).shaderSource);\n      gl.compileShader(shader);\n      gl.attachShader(program, shader);\n    }\n  }\n\n  Object.entries(attribLocations).forEach(([attrib, loc]) => gl.bindAttribLocation(program, loc, attrib));\n\n  {\n    let varyings = transformFeedbackVaryings;\n    if (varyings) {\n      if (varyings.attribs) {\n        varyings = varyings.attribs;\n      }\n      if (!Array.isArray(varyings)) {\n        varyings = Object.keys(varyings);\n      }\n      gl.transformFeedbackVaryings(program, varyings, transformFeedbackMode || SEPARATE_ATTRIBS);\n    }\n  }\n\n  gl.linkProgram(program);\n  return program;\n}\n\n/**\n * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n * program.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgram(gl, [vs, fs], options);\n *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error of a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgram(\n    gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n  // This code is really convoluted, because it may or may not be async\n  // Maybe it would be better to have a separate function\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaderSet = new Set(shaders);\n  const program = createProgramNoCheck(gl, shaders, progOptions);\n\n  function hasErrors(gl, program) {\n    const errors = getProgramErrors(gl, program, progOptions.errorCallback);\n    if (errors) {\n      deleteProgramAndShaders(gl, program, shaderSet);\n    }\n    return errors;\n  }\n\n  if (progOptions.callback) {\n    waitForProgramLinkCompletionAsync(gl, program).then(() => {\n      const errors = hasErrors(gl, program);\n      progOptions.callback(errors, errors ? undefined : program);\n    });\n    return undefined;\n  }\n\n  return hasErrors(gl, program) ? undefined : program;\n}\n\n/**\n * This only works because the functions it wraps the first 2 arguments\n * are gl and any, followed by things that become programOptions\n * @private\n */\nfunction wrapCallbackFnToAsyncFn(fn) {\n  return function(gl, arg1, ...args) {\n    return new Promise((resolve, reject) => {\n      const programOptions = getProgramOptions(...args);\n      programOptions.callback = (err, program) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(program);\n        }\n      };\n      fn(gl, arg1, programOptions);\n    });\n  };\n}\n\n/**\n * Same as createProgram but returns a promise\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramAsync(gl, [vs, fs], options);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @function\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<WebGLProgram>} The created program\n * @memberOf module:twgl/programs\n */\nconst createProgramAsync = wrapCallbackFnToAsyncFn(createProgram);\n\n/**\n * Same as createProgramInfo but returns a promise\n * @function\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<module:twgl.ProgramInfo>} The created ProgramInfo\n * @memberOf module:twgl/programs\n */\nconst createProgramInfoAsync = wrapCallbackFnToAsyncFn(createProgramInfo);\n\nasync function waitForProgramLinkCompletionAsync(gl, program) {\n  const ext = gl.getExtension('KHR_parallel_shader_compile');\n  const checkFn = ext\n      ? (gl, program) => gl.getProgramParameter(program, ext.COMPLETION_STATUS_KHR)\n      : () => true;\n\n  let waitTime = 0;\n  do {\n    await wait(waitTime);  // must wait at least once\n    waitTime = 1000 / 60;\n  } while (!checkFn(gl, program));\n}\n\nasync function waitForAllProgramsLinkCompletionAsync(gl, programs) {\n  for (const program of Object.values(programs)) {\n    await waitForProgramLinkCompletionAsync(gl, program);\n  }\n}\n\n/**\n * Check a program's link status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program Program to check\n * @param {ErrorCallback} [errFn] func for errors\n * @return {string?} errors if program is failed, else undefined\n * @private\n */\nfunction getProgramErrors(gl, program, errFn) {\n  errFn = errFn || error;\n  // Check the link status\n  const linked = gl.getProgramParameter(program, LINK_STATUS);\n  if (!linked) {\n    // something went wrong with the link\n    const lastError = gl.getProgramInfoLog(program);\n    errFn(`Error in program linking: ${lastError}`);\n    // print any errors from these shaders\n    const shaders = gl.getAttachedShaders(program);\n    const errors = shaders.map(shader => checkShaderStatus(gl, gl.getShaderParameter(shader, gl.SHADER_TYPE), shader, errFn));\n    return `${lastError}\\n${errors.filter(_ => _).join('\\n')}`;\n  }\n  return undefined;\n}\n\n/**\n * Creates a program from 2 script tags.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderScriptIds Array of ids of the script\n *        tags for the shaders. The first is assumed to be the\n *        vertex shader, the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromScripts(\n    gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (const scriptId of shaderScriptIds) {\n    const shaderScript = getElementById(scriptId);\n    if (!shaderScript) {\n      return reportError(progOptions, `unknown script element: ${scriptId}`);\n    }\n    shaders.push(shaderScript.text);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Creates a program from 2 sources.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromSources(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  return createProgram(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback);\n}\n\n/**\n * Returns true if attribute/uniform is a reserved/built in\n *\n * It makes no sense to me why GL returns these because it's\n * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`\n * with names that start with `gl_` (and `webgl_` in WebGL)\n *\n * I can only assume they are there because they might count\n * when computing the number of uniforms/attributes used when you want to\n * know if you are near the limit. That doesn't really make sense\n * to me but the fact that these get returned are in the spec.\n *\n * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or\n *    `gl.getActiveAttrib`.\n * @return {bool} true if it's reserved\n * @private\n */\nfunction isBuiltIn(info) {\n  const name = info.name;\n  return name.startsWith(\"gl_\") || name.startsWith(\"webgl_\");\n}\n\nconst tokenRE = /(\\.|\\[|]|\\w+)/g;\nconst isDigit = s => s >= '0' && s <= '9';\nfunction addSetterToUniformTree(fullPath, setter, node, uniformSetters) {\n  const tokens = fullPath.split(tokenRE).filter(s => s !== '');\n  let tokenNdx = 0;\n  let path = '';\n\n  for (;;) {\n    const token = tokens[tokenNdx++];  // has to be name or number\n    path += token;\n    const isArrayIndex = isDigit(token[0]);\n    const accessor = isArrayIndex\n        ? parseInt(token)\n        : token;\n    if (isArrayIndex) {\n      path += tokens[tokenNdx++];  // skip ']'\n    }\n    const isLastToken = tokenNdx === tokens.length;\n    if (isLastToken) {\n      node[accessor] = setter;\n      break;\n    } else {\n      const token = tokens[tokenNdx++];  // has to be . or [\n      const isArray = token === '[';\n      const child = node[accessor] || (isArray ? [] : {});\n      node[accessor] = child;\n      node = child;\n      uniformSetters[path] = uniformSetters[path] || function(node) {\n        return function(value) {\n          setUniformTree(node, value);\n        };\n      }(child);\n      path += token;\n    }\n  }\n}\n\n/**\n * Creates setter functions for all uniforms of a shader\n * program.\n *\n * @see {@link module:twgl.setUniforms}\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\n * @memberOf module:twgl/programs\n */\nfunction createUniformSetters(gl, program) {\n  let textureUnit = 0;\n\n  /**\n   * Creates a setter for a uniform of the given program with it's\n   * location embedded in the setter.\n   * @param {WebGLProgram} program\n   * @param {WebGLUniformInfo} uniformInfo\n   * @returns {function} the created setter.\n   */\n  function createUniformSetter(program, uniformInfo, location) {\n    const isArray = uniformInfo.name.endsWith(\"[0]\");\n    const type = uniformInfo.type;\n    const typeInfo = typeMap[type];\n    if (!typeInfo) {\n      throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.\n    }\n    let setter;\n    if (typeInfo.bindPoint) {\n      // it's a sampler\n      const unit = textureUnit;\n      textureUnit += uniformInfo.size;\n      if (isArray) {\n        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n      } else {\n        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n      }\n    } else {\n      if (typeInfo.arraySetter && isArray) {\n        setter = typeInfo.arraySetter(gl, location);\n      } else {\n        setter = typeInfo.setter(gl, location);\n      }\n    }\n    setter.location = location;\n    return setter;\n  }\n\n  const uniformSetters = {};\n  const uniformTree = {};\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    if (isBuiltIn(uniformInfo)) {\n      continue;\n    }\n    let name = uniformInfo.name;\n    // remove the array suffix.\n    if (name.endsWith(\"[0]\")) {\n      name = name.substr(0, name.length - 3);\n    }\n    const location = gl.getUniformLocation(program, uniformInfo.name);\n    // the uniform will have no location if it's in a uniform block\n    if (location) {\n      const setter = createUniformSetter(program, uniformInfo, location);\n      uniformSetters[name] = setter;\n      addSetterToUniformTree(name, setter, uniformTree, uniformSetters);\n    }\n  }\n\n  return uniformSetters;\n}\n\n/**\n * @typedef {Object} TransformFeedbackInfo\n * @property {number} index index of transform feedback\n * @property {number} type GL type\n * @property {number} size 1 - 4\n * @memberOf module:twgl\n */\n\n/**\n * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n * @memberOf module:twgl\n */\nfunction createTransformFeedbackInfo(gl, program) {\n  const info = {};\n  const numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);\n  for (let ii = 0; ii < numVaryings; ++ii) {\n    const varying = gl.getTransformFeedbackVarying(program, ii);\n    info[varying.name] = {\n      index: ii,\n      type: varying.type,\n      size: varying.size,\n    };\n  }\n  return info;\n}\n\n/**\n * Binds buffers for transform feedback.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @memberOf module:twgl\n */\nfunction bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n  if (transformFeedbackInfo.transformFeedbackInfo) {\n    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n  }\n  if (bufferInfo.attribs) {\n    bufferInfo = bufferInfo.attribs;\n  }\n  for (const name in bufferInfo) {\n    const varying = transformFeedbackInfo[name];\n    if (varying) {\n      const buf = bufferInfo[name];\n      if (buf.offset) {\n        gl.bindBufferRange(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n      } else {\n        gl.bindBufferBase(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n      }\n    }\n  }\n}\n\n/**\n * Creates a transform feedback and sets the buffers\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @return {WebGLTransformFeedback} the created transform feedback\n * @memberOf module:twgl\n */\nfunction createTransformFeedback(gl, programInfo, bufferInfo) {\n  const tf = gl.createTransformFeedback();\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);\n  gl.useProgram(programInfo.program);\n  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, null);\n  return tf;\n}\n\n/**\n * @typedef {Object} UniformData\n * @property {string} name The name of the uniform\n * @property {number} type The WebGL type enum for this uniform\n * @property {number} size The number of elements for this uniform\n * @property {number} blockNdx The block index this uniform appears in\n * @property {number} offset The byte offset in the block for this uniform's value\n * @memberOf module:twgl\n */\n\n/**\n * The specification for one UniformBlockObject\n *\n * @typedef {Object} BlockSpec\n * @property {number} index The index of the block.\n * @property {number} size The size in bytes needed for the block\n * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n * @property {bool} usedByVertexShader Self explanatory\n * @property {bool} usedByFragmentShader Self explanatory\n * @property {bool} used Self explanatory\n * @memberOf module:twgl\n */\n\n/**\n * A `UniformBlockSpec` represents the data needed to create and bind\n * UniformBlockObjects for a given program\n *\n * @typedef {Object} UniformBlockSpec\n * @property {Object.<string, module:twgl.BlockSpec>} blockSpecs The BlockSpec for each block by block name\n * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a UniformBlockSpec for the given program.\n *\n * A UniformBlockSpec represents the data needed to create and bind\n * UniformBlockObjects\n *\n * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockSpecFromProgram(gl, program) {\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n  const uniformData = [];\n  const uniformIndices = [];\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    uniformIndices.push(ii);\n    uniformData.push({});\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    uniformData[ii].name = uniformInfo.name;\n  }\n\n  [\n    [ \"UNIFORM_TYPE\", \"type\" ],\n    [ \"UNIFORM_SIZE\", \"size\" ],  // num elements\n    [ \"UNIFORM_BLOCK_INDEX\", \"blockNdx\" ],\n    [ \"UNIFORM_OFFSET\", \"offset\", ],\n  ].forEach(function(pair) {\n    const pname = pair[0];\n    const key = pair[1];\n    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {\n      uniformData[ndx][key] = value;\n    });\n  });\n\n  const blockSpecs = {};\n\n  const numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);\n  for (let ii = 0; ii < numUniformBlocks; ++ii) {\n    const name = gl.getActiveUniformBlockName(program, ii);\n    const blockSpec = {\n      index: gl.getUniformBlockIndex(program, name),\n      usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n      size: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_DATA_SIZE),\n      uniformIndices: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),\n    };\n    blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;\n    blockSpecs[name] = blockSpec;\n  }\n\n  return {\n    blockSpecs: blockSpecs,\n    uniformData: uniformData,\n  };\n}\n\nconst arraySuffixRE = /\\[\\d+\\]\\.$/;  // better way to check?\n\nconst pad = (v, padding) => ((v + (padding - 1)) / padding | 0) * padding;\n\nfunction createUniformBlockUniformSetter(view, isArray, rows, cols) {\n  if (isArray || rows) {\n    cols = cols || 1;\n    const numElements = view.length;\n    const totalRows = numElements / 4;\n    return function(value) {\n      let dst = 0;\n      let src = 0;\n      for (let row = 0; row < totalRows; ++row) {\n        for (let col = 0; col < cols; ++col) {\n          view[dst++] = value[src++];\n        }\n        dst += 4 - cols;\n      }\n    };\n  } else {\n    return function(value) {\n      if (value.length) {\n        view.set(value);\n      } else {\n        view[0] = value;\n      }\n    };\n  }\n}\n\n/**\n * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n * and a corresponding WebGLBuffer to hold those values on the GPU\n *\n * @typedef {Object} UniformBlockInfo\n * @property {string} name The name of the block\n * @property {ArrayBuffer} array The array buffer that contains the uniform values\n * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n *    inspecting the contents of the buffer in the debugger.\n * @property {Uint8Array} asUint8t A uint8 view on the array buffer.\n * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n * @property {number} [offset] offset into buffer\n * @property {Object<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n *   `Int32Array` view, etc.\n * @property {Object<string, function>} setters A setter for this uniform.\n *   The reason to use setters is elements of arrays are padded to vec4 sizes which\n *   means if you want to set an array of 4 floats you'd need to set 16 values\n *   (or set elements 0, 4, 8, 12). In other words\n *   `someBlockInfo.uniforms.some4FloatArrayUniform.set([0, , , , 1, , , , 2, , , , 3])`\n *   where as the setter handles just passing in [0, 1, 2, 3] either directly as in\n *   `someBlockInfo.setter.some4FloatArrayUniform.set([0, 1, 2, 3])` (not recommended)\n *   or via {@link module:twgl.setBlockUniforms}\n * @memberOf module:twgl\n */\n\n/**\n * Options to allow createUniformBlockInfo to use an existing buffer and arrayBuffer at an offset\n * @typedef {Object} UniformBlockInfoOptions\n * @property {ArrayBuffer} [array] an existing array buffer to use for values\n * @property {number} [offset] the offset in bytes to use in the array buffer (default = 0)\n * @property {WebGLBuffer} [buffer] the buffer to use for this uniform block info\n * @property {number} [bufferOffset] the offset in bytes in the buffer to use (default = use offset above)\n */\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {WebGLProgram} program A WebGLProgram\n * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned\n *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {string} blockName The name of the block.\n * @param {module:twgl.UniformBlockInfoOptions} [options] Optional options for using existing an existing buffer and arrayBuffer\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName, options = {}) {\n  const blockSpecs = uniformBlockSpec.blockSpecs;\n  const uniformData = uniformBlockSpec.uniformData;\n  const blockSpec = blockSpecs[blockName];\n  if (!blockSpec) {\n    warn(\"no uniform block object named:\", blockName);\n    return {\n      name: blockName,\n      uniforms: {},\n    };\n  }\n  const offset = options.offset ?? 0;\n  const array = options.array ?? new ArrayBuffer(blockSpec.size);\n  const buffer = options.buffer ?? gl.createBuffer();\n  const uniformBufferIndex = blockSpec.index;\n  gl.bindBuffer(UNIFORM_BUFFER, buffer);\n  if (!options.buffer) {\n    gl.bufferData(UNIFORM_BUFFER, array.byteLength, DYNAMIC_DRAW);\n  }\n  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n\n  let prefix = blockName + \".\";\n  if (arraySuffixRE.test(prefix)) {\n    prefix = prefix.replace(arraySuffixRE, \".\");\n  }\n  const uniforms = {};\n  const setters = {};\n  const setterTree = {};\n  blockSpec.uniformIndices.forEach(function(uniformNdx) {\n    const data = uniformData[uniformNdx];\n    let name = data.name;\n    if (name.startsWith(prefix)) {\n      name = name.substr(prefix.length);\n    }\n    const isArray = name.endsWith('[0]');\n    if (isArray) {\n      name = name.substr(0, name.length - 3);\n    }\n    const typeInfo = typeMap[data.type];\n    const Type = typeInfo.Type;\n    const byteLength = isArray\n        ? pad(typeInfo.size, 16) * data.size\n        : typeInfo.size * data.size;\n    const uniformView = new Type(array, offset + data.offset, byteLength / Type.BYTES_PER_ELEMENT);\n    uniforms[name] = uniformView;\n    // Note: I'm not sure what to do here. The original\n    // idea was to create TypedArray views into each part\n    // of the block. This is useful, for example if you have\n    // a block with { mat4: model; mat4 view; mat4 projection; }\n    // you'll get a Float32Array for each one suitable for\n    // passing to most JS math libraries including twgl's and glMatrix.js.\n    //\n    // But, if you have a an array of structures, especially if that\n    // array is large, you get a whole bunch of TypedArray views.\n    // Every one of them has overhead and switching between them all\n    // is probably a cache miss. In that case it would really be better\n    // to just have one view (asFloat) and have all the setters\n    // just reference the correct portion. But, then you can't easily\n    // treat a matrix, or a vec4, as a standalone thing like you can\n    // with all the views.\n    //\n    // Another problem with the views is they are not shared. With\n    // uniforms you have one set of setters. With UniformBlockInfo\n    // you have a set of setters *pre block instance*. That's because\n    // TypedArray views can't be mapped to different buffers.\n    //\n    // My gut right now is if you really want the speed and compactness\n    // then you should probably roll your own solution. TWGL's goal\n    // here is ease of use as AFAICT there is no simple generic efficient\n    // solution.\n    const setter = createUniformBlockUniformSetter(uniformView, isArray, typeInfo.rows, typeInfo.cols);\n    setters[name] = setter;\n    addSetterToUniformTree(name, setter, setterTree, setters);\n  });\n  return {\n    name: blockName,\n    array,\n    asFloat: new Float32Array(array),  // for debugging\n    asUint8: new Uint8Array(array),  // needed for gl.bufferSubData because it doesn't take an array buffer\n    buffer,\n    uniforms,\n    setters,\n    offset: options.bufferOffset ?? offset,\n    size: blockSpec.size,\n  };\n}\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo}\n * @param {string} blockName The name of the block.\n * @param {module:twgl.UniformBlockInfoOptions} [options] Optional options for using existing an existing buffer and arrayBuffer\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfo(gl, programInfo, blockName, options = {}) {\n  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName, options);\n}\n\n/**\n * Binds a uniform block to the matching uniform block point.\n * Matches by blocks by name so blocks must have the same name not just the same\n * structure.\n *\n * If you have changed any values and you upload the values into the corresponding WebGLBuffer\n * call {@link module:twgl.setUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n *     no buffer is bound.\n * @memberOf module:twgl/programs\n */\nfunction bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n  const uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n  const blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n  if (blockSpec) {\n    const bufferBindIndex = blockSpec.index;\n    gl.bindBufferRange(UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.size ?? uniformBlockInfo.array.byteLength);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Uploads the current uniform values to the corresponding WebGLBuffer\n * and binds that buffer to the program's corresponding bind point for the uniform block object.\n *\n * If you haven't changed any values and you only need to bind the uniform block object\n * call {@link module:twgl.bindUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @memberOf module:twgl/programs\n */\nfunction setUniformBlock(gl, programInfo, uniformBlockInfo) {\n  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n    gl.bufferSubData(UNIFORM_BUFFER, 0, uniformBlockInfo.asUint8, uniformBlockInfo.offset || 0, uniformBlockInfo.size || 0);\n  }\n}\n\n/**\n * Sets values of a uniform block object\n *\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n *    type of uniform. So for example given a block like\n *\n *       uniform SomeBlock {\n *         float someFloat;\n *         vec2 someVec2;\n *         vec3 someVec3Array[2];\n *         int someInt;\n *       }\n *\n *  You can set the values of the uniform block with\n *\n *       twgl.setBlockUniforms(someBlockInfo, {\n *          someFloat: 12.3,\n *          someVec2: [1, 2],\n *          someVec3Array: [1, 2, 3, 4, 5, 6],\n *          someInt: 5,\n *       }\n *\n *  Arrays can be JavaScript arrays or typed arrays\n *\n *  You can also fill out structure and array values either via\n *  shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Lights {\n *       Light lights[2];\n *     };\n *\n *     // in JavaScript\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices.\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n *  **IMPORTANT!**, packing in a UniformBlock is unintuitive.\n *  For example the actual layout of `someVec3Array` above in memory\n *  is `1, 2, 3, unused, 4, 5, 6, unused`. twgl takes in 6 values\n *  as shown about and copies them, skipping the padding. This might\n *  be confusing if you're already familiar with Uniform blocks.\n *\n *  If you want to deal with the padding yourself you can access the array\n *  buffer views directly. eg:\n *\n *      someBlockInfo.someVec3Array.set([1, 2, 3, 0, 4, 5, 6, 0]);\n *\n *  Any name that doesn't match will be ignored\n * @memberOf module:twgl/programs\n */\nfunction setBlockUniforms(uniformBlockInfo, values) {\n  const setters = uniformBlockInfo.setters;\n  for (const name in values) {\n    const setter = setters[name];\n    if (setter) {\n      const value = values[name];\n      setter(value);\n    }\n  }\n}\n\nfunction setUniformTree(tree, values) {\n  for (const name in values) {\n    const prop = tree[name];\n    if (typeof prop === 'function') {\n      prop(values[name]);\n    } else {\n      setUniformTree(tree[name], values[name]);\n    }\n  }\n}\n\n/**\n * Set uniforms and binds related textures.\n *\n * example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     const tex1 = gl.createTexture();\n *     const tex2 = gl.createTexture();\n *\n *     ... assume we setup the textures with data ...\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the textures AND set the\n * uniforms.\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *\n * For the example above it is equivalent to\n *\n *     let texUnit = 0;\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ]);\n *\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *     };\n *\n *     const moreUniforms {\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *     twgl.setUniforms(programInfo, moreUniforms);\n *\n * You can also add WebGLSamplers to uniform samplers as in\n *\n *     const uniforms = {\n *       u_someSampler: {\n *         texture: someWebGLTexture,\n *         sampler: someWebGLSampler,\n *       },\n *     };\n *\n * In which case both the sampler and texture will be bound to the\n * same unit.\n *\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n *        uniforms.\n *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n *\n *     const sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     const localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, sharedUniforms);\n *     twgl.setUniforms(programInfo, localUniforms};\n *\n *   You can also fill out structure and array values either via\n *   shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Light lights[2];\n *\n *     // in JavaScript\n *\n *     twgl.setUniforms(programInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setUniforms(programInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n * @memberOf module:twgl/programs\n */\nfunction setUniforms(setters, ...args) {  // eslint-disable-line\n  const actualSetters = setters.uniformSetters || setters;\n  const numArgs = args.length;\n  for (let aNdx = 0; aNdx < numArgs; ++aNdx) {\n    const values = args[aNdx];\n    if (Array.isArray(values)) {\n      const numValues = values.length;\n      for (let ii = 0; ii < numValues; ++ii) {\n        setUniforms(actualSetters, values[ii]);\n      }\n    } else {\n      for (const name in values) {\n        const setter = actualSetters[name];\n        if (setter) {\n          setter(values[name]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Alias for `setUniforms`\n * @function\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n * @memberOf module:twgl/programs\n */\nconst setUniformsAndBindTextures = setUniforms;\n\n/**\n * Creates setter functions for all attributes of a shader\n * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n *\n * @see {@link module:twgl.setAttributes} for example\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\n * @memberOf module:twgl/programs\n */\nfunction createAttributeSetters(gl, program) {\n  const attribSetters = {\n  };\n\n  const numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);\n  for (let ii = 0; ii < numAttribs; ++ii) {\n    const attribInfo = gl.getActiveAttrib(program, ii);\n    if (isBuiltIn(attribInfo)) {\n      continue;\n    }\n    const index = gl.getAttribLocation(program, attribInfo.name);\n    const typeInfo = attrTypeMap[attribInfo.type];\n    const setter = typeInfo.setter(gl, index, typeInfo);\n    setter.location = index;\n    attribSetters[attribInfo.name] = setter;\n  }\n\n  return attribSetters;\n}\n\n/**\n * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n *\n * Example:\n *\n *     const program = createProgramFromScripts(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const attribSetters = createAttributeSetters(program);\n *\n *     const positionBuffer = gl.createBuffer();\n *     const texcoordBuffer = gl.createBuffer();\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setAttributes(attribSetters, attribs);\n *\n * Properties of attribs. For each attrib you can add\n * properties:\n *\n * *   type: the type of data in the buffer. Default = gl.FLOAT\n * *   normalize: whether or not to normalize the data. Default = false\n * *   stride: the stride. Default = 0\n * *   offset: offset into the buffer. Default = 0\n * *   divisor: the divisor for instances. Default = undefined\n *\n * For example if you had 3 value float positions, 2 value\n * float texcoord and 4 value uint8 colors you'd setup your\n * attribs like this\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *       a_color: {\n *         buffer: colorBuffer,\n *         numComponents: 4,\n *         type: gl.UNSIGNED_BYTE,\n *         normalize: true,\n *       },\n *     };\n *\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n * @memberOf module:twgl/programs\n * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n * @private\n */\nfunction setAttributes(setters, buffers) {\n  for (const name in buffers) {\n    const setter = setters[name];\n    if (setter) {\n      setter(buffers[name]);\n    }\n  }\n}\n\n/**\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n *\n * Example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *     };\n *\n *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n *\n * For the example above it is equivalent to\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n *     gl.enableVertexAttribArray(a_positionLocation);\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n *     gl.enableVertexAttribArray(a_texcoordLocation);\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n * @memberOf module:twgl/programs\n */\nfunction setBuffersAndAttributes(gl, programInfo, buffers) {\n  if (buffers.vertexArrayObject) {\n    gl.bindVertexArray(buffers.vertexArrayObject);\n  } else {\n    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n    if (buffers.indices) {\n      gl.bindBuffer(ELEMENT_ARRAY_BUFFER, buffers.indices);\n    }\n  }\n}\n\n/**\n * @typedef {Object} ProgramInfo\n * @property {WebGLProgram} program A shader program\n * @property {Object<string, WebGLUniformLocation>} uniformLocations The uniform locations of each uniform\n * @property {Object<string, number>} attribLocations The locations of each attribute\n * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n * @property {module:twgl.UniformBlockSpec} [uniformBlockSpec] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n * @memberOf module:twgl\n */\n\n/**\n * Creates a ProgramInfo from an existing program.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfoFromProgram(gl, program) {\n  const uniformSetters = createUniformSetters(gl, program);\n  const attribSetters = createAttributeSetters(gl, program);\n  const programInfo = {\n    program,\n    uniformSetters,\n    attribSetters,\n    uniformLocations: Object.fromEntries(Object.entries(uniformSetters).map(([k, v]) => [k, v.location])),\n    attribLocations: Object.fromEntries(Object.entries(attribSetters).map(([k, v]) => [k, v.location])),\n  };\n\n  if (utils.isWebGL2(gl)) {\n    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\n  }\n\n  return programInfo;\n}\n\nconst notIdRE = /\\s|{|}|;/;\n\n/**\n * Creates a ProgramInfo from 2 sources.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramInfo(gl, [vs, fs], options);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]|module:twgl.ErrorCallback} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfo(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const errors = [];\n  shaderSources = shaderSources.map(function(source) {\n    // Lets assume if there is no \\n it's an id\n    if (!notIdRE.test(source)) {\n      const script = getElementById(source);\n      if (!script) {\n        const err = `no element with id: ${source}`;\n        progOptions.errorCallback(err);\n        errors.push(err);\n      } else {\n        source = script.text;\n      }\n    }\n    return source;\n  });\n\n  if (errors.length) {\n    return reportError(progOptions, '');\n  }\n\n  const origCallback = progOptions.callback;\n  if (origCallback) {\n    progOptions.callback = (err, program) => {\n      origCallback(err, err ? undefined : createProgramInfoFromProgram(gl, program));\n    };\n  }\n\n  const program = createProgramFromSources(gl, shaderSources, progOptions);\n  if (!program) {\n    return null;\n  }\n\n  return createProgramInfoFromProgram(gl, program);\n}\n\nfunction checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions) {\n  // check errors for everything.\n  for (const [name, program] of Object.entries(programs)) {\n    const options = {...programOptions};\n    const spec = programSpecs[name];\n    if (!Array.isArray(spec)) {\n      Object.assign(options, spec);\n    }\n    const errors = getProgramErrors(gl, program, options.errorCallback);\n    if (errors) {\n      // delete everything we created\n      for (const program of Object.values(programs)) {\n        const shaders = gl.getAttachedShaders(program);\n        gl.deleteProgram(program);\n        for (const shader of shaders) {\n          // Don't delete it if we didn't create it.\n          if (!noDeleteShadersSet.has(shader)) {\n            gl.deleteShader(shader);\n          }\n        }\n      }\n      return errors;\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Creates multiple programs\n *\n * Note: the reason this function exists is because the fastest way to create multiple\n * programs in WebGL is to create and compile all shaders and link all programs and only\n * afterwards check if they succeeded. In that way, giving all your shaders\n *\n * @see {@link module:twgl.createProgram}\n *\n * Example:\n *\n *     const programs = twgl.createPrograms(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, WebGLProgram>?} the created programInfos by name\n */\nfunction createPrograms(gl, programSpecs, programOptions = {}) {\n  // Remember existing shaders so that if there is an error we don't delete them\n  const noDeleteShadersSet = new Set();\n\n  // compile and link everything\n  const programs = Object.fromEntries(Object.entries(programSpecs).map(([name, spec]) => {\n    const options = {...programOptions};\n    const shaders = Array.isArray(spec) ? spec : spec.shaders;\n    if (!Array.isArray(spec)) {\n      Object.assign(options, spec);\n    }\n    shaders.forEach(noDeleteShadersSet.add, noDeleteShadersSet);\n    return [name, createProgramNoCheck(gl, shaders, options)];\n  }));\n\n  if (programOptions.callback) {\n    waitForAllProgramsLinkCompletionAsync(gl, programs).then(() => {\n      const errors = checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions);\n      programOptions.callback(errors, errors ? undefined : programs);\n    });\n    return undefined;\n  }\n\n  const errors = checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions);\n  return errors ? undefined : programs;\n}\n\n/**\n * Creates multiple programInfos\n *\n * Note: the reason this function exists is because the fastest way to create multiple\n * programs in WebGL is to create and compile all shaders and link all programs and only\n * afterwards check if they succeeded. In that way, giving all your shaders\n *\n * @see {@link module:twgl.createProgramInfo}\n *\n * Examples:\n *\n *     const programInfos = twgl.createProgramInfos(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * or\n *\n *     const {lambert, phong, particles} = twgl.createProgramInfos(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, module:twgl.ProgramInfo>?} the created programInfos by name\n */\nfunction createProgramInfos(gl, programSpecs, programOptions) {\n  programOptions = getProgramOptions(programOptions);\n\n  function createProgramInfosForPrograms(gl, programs) {\n    return Object.fromEntries(Object.entries(programs).map(([name, program]) =>\n      [name, createProgramInfoFromProgram(gl, program)]\n    ));\n  }\n\n  const origCallback = programOptions.callback;\n  if (origCallback) {\n    programOptions.callback = (err, programs) => {\n      origCallback(err, err ? undefined : createProgramInfosForPrograms(gl, programs));\n    };\n  }\n\n  const programs = createPrograms(gl, programSpecs, programOptions);\n  if (origCallback || !programs) {\n    return undefined;\n  }\n\n  return createProgramInfosForPrograms(gl, programs);\n}\n\n/**\n * Creates multiple programs asynchronously\n *\n * @see {@link module:twgl.createProgramAsync}\n *\n * Example:\n *\n *     const programs = await twgl.createProgramsAsync(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @function\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, WebGLProgram>?} the created programInfos by name\n */\nconst createProgramsAsync = wrapCallbackFnToAsyncFn(createPrograms);\n\n/**\n * Creates multiple programInfos asynchronously\n *\n * @see {@link module:twgl.createProgramInfoAsync}\n *\n * Example:\n *\n *     const programInfos = await twgl.createProgramInfosAsync(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @function\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Promise<Object.<string, module:twgl.ProgramInfo>>} the created programInfos by name\n */\nconst createProgramInfosAsync = wrapCallbackFnToAsyncFn(createProgramInfos);\n\nexport {\n  createAttributeSetters,\n\n  createProgram,\n  createProgramAsync,\n  createPrograms,\n  createProgramsAsync,\n  createProgramFromScripts,\n  createProgramFromSources,\n  createProgramInfo,\n  createProgramInfoAsync,\n  createProgramInfos,\n  createProgramInfosAsync,\n  createProgramInfoFromProgram,\n  createUniformSetters,\n  createUniformBlockSpecFromProgram,\n  createUniformBlockInfoFromProgram,\n  createUniformBlockInfo,\n\n  createTransformFeedback,\n  createTransformFeedbackInfo,\n  bindTransformFeedbackInfo,\n\n  setAttributes,\n  setBuffersAndAttributes,\n  setUniforms,\n  setUniformsAndBindTextures,\n  setUniformBlock,\n  setBlockUniforms,\n  bindUniformBlock,\n};\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as utils from './utils.js';\nimport * as typedArrays from './typedarrays.js';\nimport * as helper from './helper.js';\n\n/**\n * Low level texture related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.textures` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/textures\n */\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */\nconst defaults = {\n  textureColor: new Uint8Array([128, 192, 255, 255]),\n  textureOptions: {},\n  crossOrigin: undefined,\n};\nconst isArrayBuffer = typedArrays.isArrayBuffer;\n\n// Should we make this on demand?\nconst getShared2DContext = function() {\n  let s_ctx;\n  return function getShared2DContext() {\n    s_ctx = s_ctx ||\n        ((typeof document !== 'undefined' && document.createElement)\n          ? document.createElement(\"canvas\").getContext(\"2d\")\n          : null);\n    return s_ctx;\n  };\n}();\n\n// NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but\n//       not only does Firefox NOT support it but Firefox freezes immediately\n//       if you try to create one instead of just returning null and continuing.\n//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext(\"2d\"));  // OffscreenCanvas may not support 2d\n\n// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2\n// we can use the various unpack settings. Otherwise we could try using\n// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap\n// is async and the current TWGL code expects a non-Async result though that\n// might not be a problem. ImageBitmap though is not available in Edge or Safari\n// as of 2018-01-02\n\n/* PixelFormat */\nconst ALPHA                          = 0x1906;\nconst RGB                            = 0x1907;\nconst RGBA                           = 0x1908;\nconst LUMINANCE                      = 0x1909;\nconst LUMINANCE_ALPHA                = 0x190A;\nconst DEPTH_COMPONENT                = 0x1902;\nconst DEPTH_STENCIL                  = 0x84F9;\n\n/* TextureWrapMode */\n// const REPEAT                         = 0x2901;\n// const MIRRORED_REPEAT                = 0x8370;\nconst CLAMP_TO_EDGE                  = 0x812f;\n\n/* TextureMagFilter */\nconst NEAREST                        = 0x2600;\nconst LINEAR                         = 0x2601;\n\n/* TextureMinFilter */\n// const NEAREST_MIPMAP_NEAREST         = 0x2700;\n// const LINEAR_MIPMAP_NEAREST          = 0x2701;\n// const NEAREST_MIPMAP_LINEAR          = 0x2702;\n// const LINEAR_MIPMAP_LINEAR           = 0x2703;\n\n/* Texture Target */\nconst TEXTURE_2D                     = 0x0de1;\nconst TEXTURE_CUBE_MAP               = 0x8513;\nconst TEXTURE_3D                     = 0x806f;\nconst TEXTURE_2D_ARRAY               = 0x8c1a;\n\n/* Cubemap Targets */\nconst TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\nconst TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\nconst TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\nconst TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851a;\n\n/* Texture Parameters */\nconst TEXTURE_MIN_FILTER             = 0x2801;\nconst TEXTURE_MAG_FILTER             = 0x2800;\nconst TEXTURE_WRAP_S                 = 0x2802;\nconst TEXTURE_WRAP_T                 = 0x2803;\nconst TEXTURE_WRAP_R                 = 0x8072;\nconst TEXTURE_MIN_LOD                = 0x813a;\nconst TEXTURE_MAX_LOD                = 0x813b;\nconst TEXTURE_BASE_LEVEL             = 0x813c;\nconst TEXTURE_MAX_LEVEL              = 0x813d;\nconst TEXTURE_COMPARE_MODE           = 0x884C;\nconst TEXTURE_COMPARE_FUNC           = 0x884D;\n\n/* Pixel store */\nconst UNPACK_ALIGNMENT                   = 0x0cf5;\nconst UNPACK_ROW_LENGTH                  = 0x0cf2;\nconst UNPACK_IMAGE_HEIGHT                = 0x806e;\nconst UNPACK_SKIP_PIXELS                 = 0x0cf4;\nconst UNPACK_SKIP_ROWS                   = 0x0cf3;\nconst UNPACK_SKIP_IMAGES                 = 0x806d;\nconst UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\nconst UNPACK_PREMULTIPLY_ALPHA_WEBGL     = 0x9241;\nconst UNPACK_FLIP_Y_WEBGL                = 0x9240;\n\nconst R8                           = 0x8229;\nconst R8_SNORM                     = 0x8F94;\nconst R16F                         = 0x822D;\nconst R32F                         = 0x822E;\nconst R8UI                         = 0x8232;\nconst R8I                          = 0x8231;\nconst RG16UI                       = 0x823A;\nconst RG16I                        = 0x8239;\nconst RG32UI                       = 0x823C;\nconst RG32I                        = 0x823B;\nconst RG8                          = 0x822B;\nconst RG8_SNORM                    = 0x8F95;\nconst RG16F                        = 0x822F;\nconst RG32F                        = 0x8230;\nconst RG8UI                        = 0x8238;\nconst RG8I                         = 0x8237;\nconst R16UI                        = 0x8234;\nconst R16I                         = 0x8233;\nconst R32UI                        = 0x8236;\nconst R32I                         = 0x8235;\nconst RGB8                         = 0x8051;\nconst SRGB8                        = 0x8C41;\nconst RGB565                       = 0x8D62;\nconst RGB8_SNORM                   = 0x8F96;\nconst R11F_G11F_B10F               = 0x8C3A;\nconst RGB9_E5                      = 0x8C3D;\nconst RGB16F                       = 0x881B;\nconst RGB32F                       = 0x8815;\nconst RGB8UI                       = 0x8D7D;\nconst RGB8I                        = 0x8D8F;\nconst RGB16UI                      = 0x8D77;\nconst RGB16I                       = 0x8D89;\nconst RGB32UI                      = 0x8D71;\nconst RGB32I                       = 0x8D83;\nconst RGBA8                        = 0x8058;\nconst SRGB8_ALPHA8                 = 0x8C43;\nconst RGBA8_SNORM                  = 0x8F97;\nconst RGB5_A1                      = 0x8057;\nconst RGBA4                        = 0x8056;\nconst RGB10_A2                     = 0x8059;\nconst RGBA16F                      = 0x881A;\nconst RGBA32F                      = 0x8814;\nconst RGBA8UI                      = 0x8D7C;\nconst RGBA8I                       = 0x8D8E;\nconst RGB10_A2UI                   = 0x906F;\nconst RGBA16UI                     = 0x8D76;\nconst RGBA16I                      = 0x8D88;\nconst RGBA32I                      = 0x8D82;\nconst RGBA32UI                     = 0x8D70;\n\nconst DEPTH_COMPONENT16            = 0x81A5;\nconst DEPTH_COMPONENT24            = 0x81A6;\nconst DEPTH_COMPONENT32F           = 0x8CAC;\nconst DEPTH32F_STENCIL8            = 0x8CAD;\nconst DEPTH24_STENCIL8             = 0x88F0;\n\n/* DataType */\nconst BYTE                         = 0x1400;\nconst UNSIGNED_BYTE                = 0x1401;\nconst SHORT                        = 0x1402;\nconst UNSIGNED_SHORT               = 0x1403;\nconst INT                          = 0x1404;\nconst UNSIGNED_INT                 = 0x1405;\nconst FLOAT                        = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5         = 0x8363;\nconst HALF_FLOAT                   = 0x140B;\nconst HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(\nconst UNSIGNED_INT_2_10_10_10_REV  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nconst UNSIGNED_INT_24_8            = 0x84FA;\n\nconst RG                           = 0x8227;\nconst RG_INTEGER                   = 0x8228;\nconst RED                          = 0x1903;\nconst RED_INTEGER                  = 0x8D94;\nconst RGB_INTEGER                  = 0x8D98;\nconst RGBA_INTEGER                 = 0x8D99;\n\nconst formatInfo = {};\n{\n  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n  // the name.\n  const f = formatInfo;\n  f[ALPHA]           = { numColorComponents: 1, };\n  f[LUMINANCE]       = { numColorComponents: 1, };\n  f[LUMINANCE_ALPHA] = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RED]             = { numColorComponents: 1, };\n  f[RED_INTEGER]     = { numColorComponents: 1, };\n  f[RG]              = { numColorComponents: 2, };\n  f[RG_INTEGER]      = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGB_INTEGER]     = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RGBA_INTEGER]    = { numColorComponents: 4, };\n  f[DEPTH_COMPONENT] = { numColorComponents: 1, };\n  f[DEPTH_STENCIL]   = { numColorComponents: 2, };\n}\n\n/**\n * @typedef {Object} TextureFormatDetails\n * @property {number} textureFormat format to pass texImage2D and similar functions.\n * @property {boolean} colorRenderable true if you can render to this format of texture.\n * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.\n * @property {number[]} type Array of possible types you can pass to texImage2D and similar function\n * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element\n * @private\n */\n\nlet s_textureInternalFormatInfo;\nfunction getTextureInternalFormatInfo(internalFormat) {\n  if (!s_textureInternalFormatInfo) {\n    // NOTE: these properties need unique names so we can let Uglify mangle the name.\n    const t = {};\n    // unsized formats\n    t[ALPHA]              = { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT], };\n    t[LUMINANCE]          = { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT], };\n    t[LUMINANCE_ALPHA]    = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT], };\n    t[RGB]                = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT, UNSIGNED_SHORT_5_6_5], };\n    t[RGBA]               = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT, UNSIGNED_SHORT_4_4_4_4, UNSIGNED_SHORT_5_5_5_1], };\n    t[DEPTH_COMPONENT]    = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],              type: [UNSIGNED_INT, UNSIGNED_SHORT], };\n\n    // sized formats\n    t[R8]                 = { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE], };\n    t[R8_SNORM]           = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE], };\n    t[R16F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT, HALF_FLOAT], };\n    t[R32F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT], };\n    t[R8UI]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE], };\n    t[R8I]                = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE], };\n    t[R16UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT], };\n    t[R16I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT], };\n    t[R32UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT], };\n    t[R32I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT], };\n    t[RG8]                = { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE], };\n    t[RG8_SNORM]          = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE], };\n    t[RG16F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT, HALF_FLOAT], };\n    t[RG32F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT], };\n    t[RG8UI]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE], };\n    t[RG8I]               = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE], };\n    t[RG16UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT], };\n    t[RG16I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT], };\n    t[RG32UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT], };\n    t[RG32I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT], };\n    t[RGB8]               = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE], };\n    t[SRGB8]              = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE], };\n    t[RGB565]             = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE, UNSIGNED_SHORT_5_6_5], };\n    t[RGB8_SNORM]         = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE], };\n    t[R11F_G11F_B10F]     = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT, HALF_FLOAT, UNSIGNED_INT_10F_11F_11F_REV], };\n    t[RGB9_E5]            = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT, HALF_FLOAT, UNSIGNED_INT_5_9_9_9_REV], };\n    t[RGB16F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT, HALF_FLOAT], };\n    t[RGB32F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT], };\n    t[RGB8UI]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE], };\n    t[RGB8I]              = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE], };\n    t[RGB16UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT], };\n    t[RGB16I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT], };\n    t[RGB32UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT], };\n    t[RGB32I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT], };\n    t[RGBA8]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE], };\n    t[SRGB8_ALPHA8]       = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE], };\n    t[RGBA8_SNORM]        = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE], };\n    t[RGB5_A1]            = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE, UNSIGNED_SHORT_5_5_5_1, UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA4]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE, UNSIGNED_SHORT_4_4_4_4], };\n    t[RGB10_A2]           = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA16F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT, HALF_FLOAT], };\n    t[RGBA32F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT], };\n    t[RGBA8UI]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE], };\n    t[RGBA8I]             = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE], };\n    t[RGB10_A2UI]         = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA16UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT], };\n    t[RGBA16I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT], };\n    t[RGBA32I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT], };\n    t[RGBA32UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT], };\n    // Sized Internal\n    t[DEPTH_COMPONENT16]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT, UNSIGNED_INT], };\n    t[DEPTH_COMPONENT24]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT], };\n    t[DEPTH_COMPONENT32F] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT], };\n    t[DEPTH24_STENCIL8]   = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8], };\n    t[DEPTH32F_STENCIL8]  = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV], };\n\n    Object.keys(t).forEach(function(internalFormat) {\n      const info = t[internalFormat];\n      info.bytesPerElementMap = {};\n      info.bytesPerElement.forEach(function(bytesPerElement, ndx) {\n        const type = info.type[ndx];\n        info.bytesPerElementMap[type] = bytesPerElement;\n      });\n    });\n    s_textureInternalFormatInfo = t;\n  }\n  return s_textureInternalFormatInfo[internalFormat];\n}\n\n/**\n * Gets the number of bytes per element for a given internalFormat / type\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {number} the number of bytes per element for the given internalFormat, type combo\n * @memberOf module:twgl/textures\n */\nfunction getBytesPerElementForInternalFormat(internalFormat, type) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  const bytesPerElement = info.bytesPerElementMap[type];\n  if (bytesPerElement === undefined) {\n    throw \"unknown internal format\";\n  }\n  return bytesPerElement;\n}\n\n/**\n * Info related to a specific texture internalFormat as returned\n * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.\n *\n * @typedef {Object} TextureFormatInfo\n * @property {number} format Format to pass to texImage2D and related functions\n * @property {number} type Type to pass to texImage2D and related functions\n * @memberOf module:twgl/textures\n */\n\n/**\n * Gets the format and type for a given internalFormat\n *\n * @param {number} internalFormat The internal format\n * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,\n * @memberOf module:twgl/textures\n */\nfunction getFormatAndTypeForInternalFormat(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return {\n    format: info.textureFormat,\n    type: info.type[0],\n  };\n}\n\n/**\n * Returns true if value is power of 2\n * @param {number} value number to check.\n * @return true if value is power of 2\n * @private\n */\nfunction isPowerOf2(value) {\n  return (value & (value - 1)) === 0;\n}\n\n/**\n * Gets whether or not we can generate mips for the given\n * internal format.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number} width The width parameter from texImage2D etc..\n * @param {number} height The height parameter from texImage2D etc..\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canGenerateMipmap(gl, width, height, internalFormat) {\n  if (!utils.isWebGL2(gl)) {\n    return isPowerOf2(width) && isPowerOf2(height);\n  }\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.colorRenderable && info.textureFilterable;\n}\n\n/**\n * Gets whether or not we can generate mips for the given format\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canFilter(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.textureFilterable;\n}\n\n/**\n * Gets the number of components for a given image format.\n * @param {number} format the format.\n * @return {number} the number of components for the format.\n * @memberOf module:twgl/textures\n */\nfunction getNumComponentsForFormat(format) {\n  const info = formatInfo[format];\n  if (!info) {\n    throw \"unknown format: \" + format;\n  }\n  return info.numColorComponents;\n}\n\n/**\n * Gets the texture type for a given array type.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @return {number} the gl texture type\n * @private\n */\nfunction getTextureTypeForArrayType(gl, src, defaultType) {\n  if (isArrayBuffer(src)) {\n    return typedArrays.getGLTypeForTypedArray(src);\n  }\n  return defaultType || UNSIGNED_BYTE;\n}\n\nfunction guessDimensions(gl, target, width, height, numElements) {\n  if (numElements % 1 !== 0) {\n    throw \"can't guess dimensions\";\n  }\n  if (!width && !height) {\n    const size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP ? 6 : 1));\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width;\n    if (height % 1) {\n      throw \"can't guess dimensions\";\n    }\n  } else if (!width) {\n    width = numElements / height;\n    if (width % 1) {\n      throw \"can't guess dimensions\";\n    }\n  }\n  return {\n    width: width,\n    height: height,\n  };\n}\n\n/**\n * Sets the default texture color.\n *\n * The default texture color is used when loading textures from\n * urls. Because the URL will be loaded async we'd like to be\n * able to use the texture immediately. By putting a 1x1 pixel\n * color in the texture we can start using the texture before\n * the URL has loaded.\n *\n * @param {number[]} color Array of 4 values in the range 0 to 1\n * @deprecated see {@link module:twgl.setDefaults}\n * @memberOf module:twgl/textures\n */\nfunction setDefaultTextureColor(color) {\n  defaults.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\nfunction setDefaults(newDefaults) {\n  helper.copyExistingProperties(newDefaults, defaults);\n  if (newDefaults.textureColor) {\n    setDefaultTextureColor(newDefaults.textureColor);\n  }\n}\n\n/**\n * A function to generate the source for a texture.\n * @callback TextureFunc\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options the texture options\n * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.\n * @memberOf module:twgl\n */\n\n/**\n * Texture options passed to most texture functions. Each function will use whatever options\n * are appropriate for its needs. This lets you pass the same options to all functions.\n *\n * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,\n * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.\n *\n * @typedef {Object} TextureOptions\n * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.\n * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n * @property {number} [minMag] both the min and mag filter settings.\n * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`\n *     is ArrayBufferView defaults to type that matches ArrayBufferView type.\n * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [minLod] TEXTURE_MIN_LOD setting\n * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n * @property {number} [compareFunc] TEXTURE_COMPARE_FUNC setting\n * @property {number} [compareMode] TEXTURE_COMPARE_MODE setting\n * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.\n *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`\n *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink\n * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and\n *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above\n *    then then `auto` is assumed to be `false` unless explicity set to `true`.\n * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n *\n *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n *\n * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n *\n *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.\n *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n *    The pieces will be uploaded in `cubeFaceOrder`\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture\n *    and will be scaled to the specified width and height OR to the size of the first image that loads.\n *\n *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n *    `HTMLCanvasElement`, `HTMLVideoElement`.\n *\n *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is\n *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`\n *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n *    by 6. Then\n *\n *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n *\n *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n *\n * If `number[]` will be converted to `type`.\n *\n * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n * an array etc...\n *\n * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n *\n * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n *    default: undefined. Also see {@link module:twgl.setDefaults}.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets any packing state that will be set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setPackState(gl, options) {\n  gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion ?? 0);\n  gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha ?? 0);\n  gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY ?? 0);\n}\n\n/**\n * Set skip state to defaults\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setSkipStateToDefault(gl) {\n  gl.pixelStorei(UNPACK_ALIGNMENT, 4);\n  if (utils.isWebGL2(gl)) {\n    gl.pixelStorei(UNPACK_ROW_LENGTH, 0);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_PIXELS, 0);\n    gl.pixelStorei(UNPACK_SKIP_ROWS, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n  }\n}\n\n/**\n * Sets the parameters of a texture or sampler\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number|WebGLSampler} target texture target or sampler\n * @param {function()} parameteriFn texParameteri or samplerParameteri fn\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @private\n */\nfunction setTextureSamplerParameters(gl, target, parameteriFn, options) {\n  if (options.minMag) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);\n  }\n  if (options.min) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);\n  }\n  if (options.mag) {\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);\n  }\n  if (options.wrap) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);\n    if (target === TEXTURE_3D || helper.isSampler(gl, target)) {\n      parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);\n    }\n  }\n  if (options.wrapR) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);\n  }\n  if (options.wrapS) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);\n  }\n  if (options.wrapT) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);\n  }\n  if (options.minLod !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);\n  }\n  if (options.maxLod !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);\n  }\n  if (options.baseLevel !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);\n  }\n  if (options.maxLevel !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);\n  }\n  if (options.compareFunc !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_COMPARE_FUNC, options.compareFunc);\n  }\n  if (options.compareMode !== undefined) {\n    parameteriFn.call(gl, target, TEXTURE_COMPARE_MODE, options.compareMode);\n  }\n}\n\n/**\n * Sets the texture parameters of a texture.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureParameters(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n}\n\n/**\n * Sets the sampler parameters of a sampler.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setSamplerParameters(gl, sampler, options) {\n  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n}\n\n/**\n * Creates a new sampler object and sets parameters.\n *\n * Example:\n *\n *      const sampler = twgl.createSampler(gl, {\n *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n * @return {Object.<string,WebGLSampler>} the created samplers by name\n * @private\n */\nfunction createSampler(gl, options) {\n  const sampler = gl.createSampler();\n  setSamplerParameters(gl, sampler, options);\n  return sampler;\n}\n\n/**\n * Creates a multiple sampler objects and sets parameters on each.\n *\n * Example:\n *\n *      const samplers = twgl.createSamplers(gl, {\n *        nearest: {\n *          minMag: gl.NEAREST,\n *        },\n *        nearestClampS: {\n *          minMag: gl.NEAREST,\n *          wrapS: gl.CLAMP_TO_NEAREST,\n *        },\n *        linear: {\n *          minMag: gl.LINEAR,\n *        },\n *        nearestClamp: {\n *          minMag: gl.NEAREST,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClamp: {\n *          minMag: gl.LINEAR,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClampT: {\n *          minMag: gl.LINEAR,\n *          wrapT: gl.CLAMP_TO_EDGE,\n *        },\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n * @private\n */\nfunction createSamplers(gl, samplerOptions) {\n  const samplers = {};\n  Object.keys(samplerOptions).forEach(function(name) {\n    samplers[name] = createSampler(gl, samplerOptions[name]);\n  });\n  return samplers;\n}\n\n/**\n * Makes a 1x1 pixel\n * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values\n * @return {Uint8Array} Unit8Array with color.\n * @private\n */\nfunction make1Pixel(color) {\n  color = color || defaults.textureColor;\n  if (isArrayBuffer(color)) {\n    return color;\n  }\n  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\n/**\n * Sets filtering or generates mips for texture based on width or height\n * If width or height is not passed in uses `options.width` and//or `options.height`\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @param {number} [width] width of texture\n * @param {number} [height] height of texture\n * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n * @memberOf module:twgl/textures\n */\nfunction setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {\n  options = options || defaults.textureOptions;\n  internalFormat = internalFormat || RGBA;\n  const target = options.target || TEXTURE_2D;\n  width = width || options.width;\n  height = height || options.height;\n  gl.bindTexture(target, tex);\n  if (canGenerateMipmap(gl, width, height, internalFormat)) {\n    gl.generateMipmap(target);\n  } else {\n    const filtering = canFilter(internalFormat) ? LINEAR : NEAREST;\n    gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n}\n\nfunction shouldAutomaticallySetTextureFilteringForSize(options) {\n  return options.auto === true || (options.auto === undefined && options.level === undefined);\n}\n\n/**\n * Gets an array of cubemap face enums\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @return {number[]} cubemap face enums\n * @private\n */\nfunction getCubeFaceOrder(gl, options) {\n  options = options || {};\n  return options.cubeFaceOrder || [\n      TEXTURE_CUBE_MAP_POSITIVE_X,\n      TEXTURE_CUBE_MAP_NEGATIVE_X,\n      TEXTURE_CUBE_MAP_POSITIVE_Y,\n      TEXTURE_CUBE_MAP_NEGATIVE_Y,\n      TEXTURE_CUBE_MAP_POSITIVE_Z,\n      TEXTURE_CUBE_MAP_NEGATIVE_Z,\n    ];\n}\n\n/**\n * @typedef {Object} FaceInfo\n * @property {number} face gl enum for texImage2D\n * @property {number} ndx face index (0 - 5) into source data\n * @ignore\n */\n\n/**\n * Gets an array of FaceInfos\n * There's a bug in some NVidia drivers that will crash the driver if\n * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n * the user's desired order from his faces to WebGL and make sure we\n * do the faces in WebGL order\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but\n *    it's needed internally to sort the array of `ndx` properties by `face`.\n * @private\n */\nfunction getCubeFacesWithNdx(gl, options) {\n  const faces = getCubeFaceOrder(gl, options);\n  // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n  const facesWithNdx = faces.map(function(face, ndx) {\n    return { face: face, ndx: ndx };\n  });\n  facesWithNdx.sort(function(a, b) {\n    return a.face - b.face;\n  });\n  return facesWithNdx;\n}\n\n/**\n * Set a texture from the contents of an element. Will also set\n * texture filtering or generate mips based on the dimensions of the element\n * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {HTMLElement} element a canvas, img, or video element.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @kind function\n */\nfunction setTextureFromElement(gl, tex, element, options) {\n  options = options || defaults.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  const level = options.level || 0;\n  let width = element.width;\n  let height = element.height;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // guess the parts\n    const imgWidth  = element.width;\n    const imgHeight = element.height;\n    let size;\n    let slices;\n    if (imgWidth / 6 === imgHeight) {\n      // It's 6x1\n      size = imgHeight;\n      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    } else if (imgHeight / 6 === imgWidth) {\n      // It's 1x6\n      size = imgWidth;\n      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n    } else if (imgWidth / 3 === imgHeight / 2) {\n      // It's 3x2\n      size = imgWidth / 3;\n      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n    } else if (imgWidth / 2 === imgHeight / 3) {\n      // It's 2x3\n      size = imgWidth / 2;\n      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n    } else {\n      throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n    }\n    const ctx = getShared2DContext();\n    if (ctx) {\n      ctx.canvas.width = size;\n      ctx.canvas.height = size;\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);\n      });\n      // Free up the canvas memory\n      ctx.canvas.width = 1;\n      ctx.canvas.height = 1;\n    } else if (typeof createImageBitmap !== 'undefined') {\n      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's\n      // note lossy? (alpha is not premultiplied? although I'm not sure what\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        // We can't easily use a default texture color here as it would have to match\n        // the type across all faces where as with a 2D one there's only one face\n        // so we're replacing everything all at once. It also has to be the correct size.\n        // On the other hand we need all faces to be the same size so as one face loads\n        // the rest match else the texture will be un-renderable.\n        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);\n        createImageBitmap(element, xOffset, yOffset, size, size, {\n          premultiplyAlpha: 'none',\n          colorSpaceConversion: 'none',\n        })\n        .then(function(imageBitmap) {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n          }\n        });\n      });\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    const smallest = Math.min(element.width, element.height);\n    const largest = Math.max(element.width, element.height);\n    const depth = largest / smallest;\n    if (depth % 1 !== 0) {\n      throw \"can not compute 3D dimensions of element\";\n    }\n    const xMult = element.width  === largest ? 1 : 0;\n    const yMult = element.height === largest ? 1 : 0;\n    gl.pixelStorei(UNPACK_ALIGNMENT, 1);\n    gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n    for (let d = 0; d < depth; ++d) {\n      const srcX = d * smallest * xMult;\n      const srcY = d * smallest * yMult;\n      gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);\n      gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);\n      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);\n    }\n    setSkipStateToDefault(gl);\n  } else {\n    gl.texImage2D(target, level, internalFormat, format, type, element);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n}\n\nfunction noop() {\n}\n\n/**\n * Checks whether the url's origin is the same so that we can set the `crossOrigin`\n * @param {string} url url to image\n * @returns {boolean} true if the window's origin is the same as image's url\n * @private\n */\nfunction urlIsSameOrigin(url) {\n  if (typeof document !== 'undefined') {\n    // for IE really\n    const a = document.createElement('a');\n    a.href = url;\n    return a.hostname === location.hostname &&\n           a.port     === location.port &&\n           a.protocol === location.protocol;\n  } else {\n    const localOrigin = (new URL(location.href)).origin;\n    const urlOrigin = (new URL(url, location.href)).origin;\n    return urlOrigin === localOrigin;\n  }\n}\n\nfunction setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {\n  return crossOrigin === undefined && !urlIsSameOrigin(url)\n     ? 'anonymous'\n     : crossOrigin;\n}\n\n/**\n * Loads an image\n * @param {string} url url to image\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @return {HTMLImageElement} the image being loaded.\n * @private\n */\nfunction loadImage(url, crossOrigin, callback) {\n  callback = callback || noop;\n  let img;\n  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults.crossOrigin;\n  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);\n  if (typeof Image !== 'undefined') {\n    img = new Image();\n    if (crossOrigin !== undefined) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    const clearEventHandlers = function clearEventHandlers() {\n      img.removeEventListener('error', onError);  // eslint-disable-line\n      img.removeEventListener('load', onLoad);  // eslint-disable-line\n      img = null;\n    };\n\n    const onError = function onError() {\n      const msg = \"couldn't load image: \" + url;\n      helper.error(msg);\n      callback(msg, img);\n      clearEventHandlers();\n    };\n\n    const onLoad = function onLoad() {\n      callback(null, img);\n      clearEventHandlers();\n    };\n\n    img.addEventListener('error', onError);\n    img.addEventListener('load', onLoad);\n    img.src = url;\n    return img;\n  } else if (typeof ImageBitmap !== 'undefined') {\n    let err;\n    let bm;\n    const cb = function cb() {\n      callback(err, bm);\n    };\n\n    const options = {};\n    if (crossOrigin) {\n      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin\n    }\n    fetch(url, options).then(function(response) {\n      if (!response.ok) {\n        throw response;\n      }\n      return response.blob();\n    }).then(function(blob) {\n      return createImageBitmap(blob, {\n        premultiplyAlpha: 'none',\n        colorSpaceConversion: 'none',\n      });\n    }).then(function(bitmap) {\n      // not sure if this works. We don't want\n      // to catch the user's error. So, call\n      // the callback in a timeout so we're\n      // not in this scope inside the promise.\n      bm = bitmap;\n      setTimeout(cb);\n    }).catch(function(e) {\n      err = e;\n      setTimeout(cb);\n    });\n    img = null;\n  }\n  return img;\n}\n\n/**\n * check if object is a TexImageSource\n *\n * @param {Object} obj Object to test\n * @return {boolean} true if object is a TexImageSource\n * @private\n */\nfunction isTexImageSource(obj) {\n  return (typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap) ||\n         (typeof ImageData !== 'undefined'  && obj instanceof ImageData) ||\n         (typeof HTMLElement !== 'undefined'  && obj instanceof HTMLElement);\n}\n\n/**\n * if obj is an TexImageSource then just\n * uses it otherwise if obj is a string\n * then load it first.\n *\n * @param {string|TexImageSource} obj\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @private\n */\nfunction loadAndUseImage(obj, crossOrigin, callback) {\n  if (isTexImageSource(obj)) {\n    setTimeout(function() {\n      callback(null, obj);\n    });\n    return obj;\n  }\n\n  return loadImage(obj, crossOrigin, callback);\n}\n\n/**\n * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction setTextureTo1PixelColor(gl, tex, options) {\n  options = options || defaults.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  if (options.color === false) {\n    return;\n  }\n  // Assume it's a URL\n  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n  const color = make1Pixel(options.color);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE, color);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, 0, RGBA, 1, 1, 1, 0, RGBA, UNSIGNED_BYTE, color);\n  } else {\n    gl.texImage2D(target, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE, color);\n  }\n}\n\n/**\n * The src image(s) used to create a texture.\n *\n * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n * you can pass in urls for images to load into the textures. If it's a single url\n * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n * this will be a corresponding array of images for the cubemap.\n *\n * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback TextureReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} texture the texture.\n * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when all images have finished downloading and been uploaded into their respective textures\n * @callback TexturesReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback CubemapReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each face.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback ThreeDReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each slice.\n * @memberOf module:twgl\n */\n\n/**\n * Loads a texture from an image from a Url as specified in `options.src`\n * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n * immediately useable. It will be updated with the contents of the image once the image has finished\n * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n *    be non null if there was an error.\n * @return {HTMLImageElement} the image being downloaded.\n * @memberOf module:twgl/textures\n */\nfunction loadTextureFromUrl(gl, tex, options, callback) {\n  callback = callback || noop;\n  options = options || defaults.textureOptions;\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  const img = loadAndUseImage(options.src, options.crossOrigin, function(err, img) {\n    if (err) {\n      callback(err, tex, img);\n    } else {\n      setTextureFromElement(gl, tex, img, options);\n      callback(null, tex, img);\n    }\n  });\n  return img;\n}\n\n/**\n * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction loadCubemapFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  if (urls.length !== 6) {\n    throw \"there must be 6 urls for a cubemap\";\n  }\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE;\n  const target = options.target || TEXTURE_2D;\n  if (target !== TEXTURE_CUBE_MAP) {\n    throw \"target must be TEXTURE_CUBE_MAP\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = 6;\n  const errors = [];\n  const faces = getCubeFaceOrder(gl, options);\n  let imgs;  // eslint-disable-line\n\n  function uploadImg(faceTarget) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        if (img.width !== img.height) {\n          errors.push(\"cubemap face img is not a square: \" + img.src);\n        } else {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n\n          // So assuming this is the first image we now have one face that's img sized\n          // and 5 faces that are 1x1 pixel so size the other faces\n          if (numToLoad === 5) {\n            // use the default order\n            getCubeFaceOrder(gl).forEach(function(otherTarget) {\n              // Should we re-use the same face or a color?\n              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);\n            });\n          } else {\n            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);\n          }\n\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            gl.generateMipmap(target);\n          }\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n  });\n}\n\n/**\n * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.\n * Will set the texture to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n *\n * If the width and height is not specified the width and height of the first\n * image loaded will be used. Note that since images are loaded async\n * which image downloads first is unknown.\n *\n * If an image is not the same size as the width and height it will be scaled\n * to that width and height.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction loadSlicesFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE;\n  const target = options.target || TEXTURE_2D_ARRAY;\n  if (target !== TEXTURE_3D && target !== TEXTURE_2D_ARRAY) {\n    throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = urls.length;\n  const errors = [];\n  let imgs;  // eslint-disable-line\n  const level = options.level || 0;\n  let width = options.width;\n  let height = options.height;\n  const depth = urls.length;\n  let firstImage = true;\n\n  function uploadImg(slice) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        setPackState(gl, options);\n        gl.bindTexture(target, tex);\n\n        if (firstImage) {\n          firstImage = false;\n          width = options.width || img.width;\n          height = options.height || img.height;\n          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n\n          // put it in every slice otherwise some slices will be 0,0,0,0\n          for (let s = 0; s < depth; ++s) {\n            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);\n          }\n        } else {\n          let src = img;\n          let ctx;\n          if (img.width !== width || img.height !== height) {\n            // Size the image to fix\n            ctx = getShared2DContext();\n            src = ctx.canvas;\n            ctx.canvas.width = width;\n            ctx.canvas.height = height;\n            ctx.drawImage(img, 0, 0, width, height);\n          }\n\n          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);\n\n          // free the canvas memory\n          if (ctx && src === ctx.canvas) {\n            ctx.canvas.width = 0;\n            ctx.canvas.height = 0;\n          }\n        }\n\n        if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n          gl.generateMipmap(target);\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));\n  });\n}\n\n/**\n * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n * guess the size. See {@link module:twgl.TextureOptions}.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureFromArray(gl, tex, src, options) {\n  options = options || defaults.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  let width = options.width;\n  let height = options.height;\n  let depth = options.depth;\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  if (!isArrayBuffer(src)) {\n    const Type = typedArrays.getTypedArrayTypeForGLType(type);\n    src = new Type(src);\n  } else if (src instanceof Uint8ClampedArray) {\n    src = new Uint8Array(src.buffer);\n  }\n\n  const bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\n  const numElements = src.byteLength / bytesPerElement;  // TODO: check UNPACK_ALIGNMENT?\n  if (numElements % 1) {\n    throw \"length wrong size for format: \" + utils.glEnumToString(gl, format);\n  }\n  let dimensions;\n  if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    if (!width && !height && !depth) {\n      const size = Math.cbrt(numElements);\n      if (size % 1 !== 0) {\n        throw \"can't guess cube size of array of numElements: \" + numElements;\n      }\n      width = size;\n      height = size;\n      depth = size;\n    } else if (width && (!height || !depth)) {\n      dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n      height = dimensions.width;\n      depth = dimensions.height;\n    } else if (height && (!width || !depth)) {\n      dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n      width = dimensions.width;\n      depth = dimensions.height;\n    } else {\n      dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n      width = dimensions.width;\n      height = dimensions.height;\n    }\n  } else {\n    dimensions = guessDimensions(gl, target, width, height, numElements);\n    width = dimensions.width;\n    height = dimensions.height;\n  }\n  setSkipStateToDefault(gl);\n  gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n    const faceSize = numElements / 6 * elementsPerElement;\n\n    getCubeFacesWithNdx(gl, options).forEach(f => {\n      const offset = faceSize * f.ndx;\n      const data = src.subarray(offset, offset + faceSize);\n      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);\n    });\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);\n  }\n  return {\n    width: width,\n    height: height,\n    depth: depth,\n    type: type,\n  };\n}\n\n/**\n * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n * You must set `options.width` and `options.height`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setEmptyTexture(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);\n  }\n}\n\n/**\n * Creates a texture based on the options passed in.\n *\n * Note: may reset UNPACK_ALIGNMENT, UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_IMAGES\n * UNPACK_SKIP_PIXELS, and UNPACK_SKIP_ROWS\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n * @return {WebGLTexture} the created texture.\n * @memberOf module:twgl/textures\n */\nfunction createTexture(gl, options, callback) {\n  callback = callback || noop;\n  options = options || defaults.textureOptions;\n  const tex = gl.createTexture();\n  const target = options.target || TEXTURE_2D;\n  let width  = options.width  || 1;\n  let height = options.height || 1;\n  const internalFormat = options.internalFormat || RGBA;\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // this should have been the default for cubemaps :(\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n  let src = options.src;\n  if (src) {\n    if (typeof src === \"function\") {\n      src = src(gl, options);\n    }\n    if (typeof (src) === \"string\") {\n      loadTextureFromUrl(gl, tex, options, callback);\n    } else if (isArrayBuffer(src) ||\n               (Array.isArray(src) && (\n                    typeof src[0] === 'number' ||\n                    Array.isArray(src[0]) ||\n                    isArrayBuffer(src[0]))\n               )\n              ) {\n      const dimensions = setTextureFromArray(gl, tex, src, options);\n      width  = dimensions.width;\n      height = dimensions.height;\n    } else if (Array.isArray(src) && (typeof (src[0]) === 'string' || isTexImageSource(src[0]))) {\n      if (target === TEXTURE_CUBE_MAP) {\n        loadCubemapFromUrls(gl, tex, options, callback);\n      } else {\n        loadSlicesFromUrls(gl, tex, options, callback);\n      }\n    } else { // if (isTexImageSource(src))\n      setTextureFromElement(gl, tex, src, options);\n      width  = src.width;\n      height = src.height;\n    }\n  } else {\n    setEmptyTexture(gl, tex, options);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n  return tex;\n}\n\n/**\n * Resizes a texture based on the options passed in.\n *\n * Note: This is not a generic resize anything function.\n * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n * It will use `options.src` if it exists to try to determine a `type`\n * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n * for the texture. Texture parameters will be set accordingly\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the texture to resize\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {number} [width] the new width. If not passed in will use `options.width`\n * @param {number} [height] the new height. If not passed in will use `options.height`\n * @param {number} [depth] the new depth. If not passed in will use `options.depth`\n * @memberOf module:twgl/textures\n */\nfunction resizeTexture(gl, tex, options, width, height, depth) {\n  width = width || options.width;\n  height = height || options.height;\n  depth = depth || options.depth;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  let type;\n  const src = options.src;\n  if (!src) {\n    type = options.type || formatType.type;\n  } else if (isArrayBuffer(src) || (Array.isArray(src) && typeof (src[0]) === 'number')) {\n    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  } else {\n    type = options.type || formatType.type;\n  }\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);\n  }\n}\n\n/**\n * Check if a src is an async request.\n * if src is a string we're going to download an image\n * if src is an array of strings we're going to download cubemap images\n * @param {*} src The src from a TextureOptions\n * @returns {bool} true if src is async.\n * @private\n */\nfunction isAsyncSrc(src) {\n  return typeof src === 'string' ||\n         (Array.isArray(src) && typeof src[0] === 'string');\n}\n\n/**\n * Creates a bunch of textures based on the passed in options.\n *\n * Example:\n *\n *     const textures = twgl.createTextures(gl, {\n *       // a power of 2 image\n *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n *       // a non-power of 2 image\n *       clover: { src: \"images/clover.jpg\" },\n *       // From a canvas\n *       fromCanvas: { src: ctx.canvas },\n *       // A cubemap from 6 images\n *       yokohama: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: [\n *           'images/yokohama/posx.jpg',\n *           'images/yokohama/negx.jpg',\n *           'images/yokohama/posy.jpg',\n *           'images/yokohama/negy.jpg',\n *           'images/yokohama/posz.jpg',\n *           'images/yokohama/negz.jpg',\n *         ],\n *       },\n *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n *       goldengate: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: 'images/goldengate.jpg',\n *       },\n *       // A 2x2 pixel texture from a JavaScript array\n *       checker: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         src: [\n *           255,255,255,255,\n *           192,192,192,255,\n *           192,192,192,255,\n *           255,255,255,255,\n *         ],\n *       },\n *       // a 1x2 pixel texture from a typed array.\n *       stripe: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         format: gl.LUMINANCE,\n *         src: new Uint8Array([\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *         ]),\n *         width: 1,\n *       },\n *     });\n *\n * Now\n *\n * *   `textures.hftIcon` will be a 2d texture\n * *   `textures.clover` will be a 2d texture\n * *   `textures.fromCanvas` will be a 2d texture\n * *   `textures.yohohama` will be a cubemap texture\n * *   `textures.goldengate` will be a cubemap texture\n * *   `textures.checker` will be a 2d texture\n * *   `textures.stripe` will be a 2d texture\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n * @return {Object.<string,WebGLTexture>} the created textures by name\n * @memberOf module:twgl/textures\n */\nfunction createTextures(gl, textureOptions, callback) {\n  callback = callback || noop;\n  let numDownloading = 0;\n  const errors = [];\n  const textures = {};\n  const images = {};\n\n  function callCallbackIfReady() {\n    if (numDownloading === 0) {\n      setTimeout(function() {\n        callback(errors.length ? errors : undefined, textures, images);\n      }, 0);\n    }\n  }\n\n  Object.keys(textureOptions).forEach(function(name) {\n    const options = textureOptions[name];\n    let onLoadFn;\n    if (isAsyncSrc(options.src)) {\n      onLoadFn = function(err, tex, img) {\n        images[name] = img;\n        --numDownloading;\n        if (err) {\n          errors.push(err);\n        }\n        callCallbackIfReady();\n      };\n      ++numDownloading;\n    }\n    textures[name] = createTexture(gl, options, onLoadFn);\n  });\n\n  // queue the callback if there are no images to download.\n  // We do this because if your code is structured to wait for\n  // images to download but then you comment out all the async\n  // images your code would break.\n  callCallbackIfReady();\n\n  return textures;\n}\n\nexport {\n  setDefaults as setTextureDefaults_,\n\n  createSampler,\n  createSamplers,\n  setSamplerParameters,\n\n  createTexture,\n  setEmptyTexture,\n  setTextureFromArray,\n  loadTextureFromUrl,\n  setTextureFromElement,\n  setTextureFilteringForSize,\n  setTextureParameters,\n  setDefaultTextureColor,\n  createTextures,\n  resizeTexture,\n\n  canGenerateMipmap,\n  canFilter,\n  getNumComponentsForFormat,\n  getBytesPerElementForInternalFormat,\n  getFormatAndTypeForInternalFormat,\n};\n\n","export * from './twgl.js';\n\n\n\n\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as attributes from './attributes.js';\nimport * as textures from './textures.js';\nimport * as helper from './helper.js';\nimport * as utils from './utils.js';\n\nimport * as draw from './draw.js';\nimport * as framebuffers from './framebuffers.js';\nimport * as programs from './programs.js';\nimport * as typedarrays from './typedarrays.js';\nimport * as vertexArrays from './vertex-arrays.js';\n\n/**\n * The main TWGL module.\n *\n * For most use cases you shouldn't need anything outside this module.\n * Exceptions between the stuff added to twgl-full (v3, m4, primitives)\n *\n * @module twgl\n * @borrows module:twgl/attributes.setAttribInfoBufferFromArray as setAttribInfoBufferFromArray\n * @borrows module:twgl/attributes.createBufferInfoFromArrays as createBufferInfoFromArrays\n * @borrows module:twgl/attributes.createVertexArrayInfo as createVertexArrayInfo\n * @borrows module:twgl/draw.drawBufferInfo as drawBufferInfo\n * @borrows module:twgl/draw.drawObjectList as drawObjectList\n * @borrows module:twgl/framebuffers.createFramebufferInfo as createFramebufferInfo\n * @borrows module:twgl/framebuffers.resizeFramebufferInfo as resizeFramebufferInfo\n * @borrows module:twgl/framebuffers.bindFramebufferInfo as bindFramebufferInfo\n * @borrows module:twgl/programs.createProgramInfo as createProgramInfo\n * @borrows module:twgl/programs.createUniformBlockInfo as createUniformBlockInfo\n * @borrows module:twgl/programs.bindUniformBlock as bindUniformBlock\n * @borrows module:twgl/programs.setUniformBlock as setUniformBlock\n * @borrows module:twgl/programs.setBlockUniforms as setBlockUniforms\n * @borrows module:twgl/programs.setUniforms as setUniforms\n * @borrows module:twgl/programs.setBuffersAndAttributes as setBuffersAndAttributes\n * @borrows module:twgl/textures.setTextureFromArray as setTextureFromArray\n * @borrows module:twgl/textures.createTexture as createTexture\n * @borrows module:twgl/textures.resizeTexture as resizeTexture\n * @borrows module:twgl/textures.createTextures as createTextures\n */\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */\nconst defaults = {\n  addExtensionsToContext: true,\n};\n\n/**\n * Various default settings for twgl.\n *\n * Note: You can call this any number of times. Example:\n *\n *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n *     twgl.setDefaults({ attribPrefix: 'a_' });\n *\n * is equivalent to\n *\n *     twgl.setDefaults({\n *       textureColor: [1, 0, 0, 1],\n *       attribPrefix: 'a_',\n *     });\n *\n * @typedef {Object} Defaults\n * @property {string} [attribPrefix] The prefix to stick on attributes\n *\n *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n *   In other words I'll create arrays of geometry like this\n *\n *       const arrays = {\n *         position: ...\n *         normal: ...\n *         texcoord: ...\n *       };\n *\n *   But need those mapped to attributes and my attributes start with `a_`.\n *\n *   Default: `\"\"`\n *\n * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1\n *\n *   The default texture color is used when loading textures from\n *   urls. Because the URL will be loaded async we'd like to be\n *   able to use the texture immediately. By putting a 1x1 pixel\n *   color in the texture we can start using the texture before\n *   the URL has loaded.\n *\n *   Default: `[0.5, 0.75, 1, 1]`\n *\n * @property {string} [crossOrigin]\n *\n *   If not undefined sets the crossOrigin attribute on images\n *   that twgl creates when downloading images for textures.\n *\n *   Also see {@link module:twgl.TextureOptions}.\n *\n * @property {bool} [addExtensionsToContext]\n *\n *   If true, then, when twgl will try to add any supported WebGL extensions\n *   directly to the context under their normal GL names. For example\n *   if ANGLE_instances_arrays exists then twgl would enable it,\n *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,\n *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`\n *   to the `WebGLRenderingContext`.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets various defaults for twgl.\n *\n * In the interest of terseness which is kind of the point\n * of twgl I've integrated a few of the older functions here\n *\n * @param {module:twgl.Defaults} newDefaults The default settings.\n * @memberOf module:twgl\n */\nfunction setDefaults(newDefaults) {\n  helper.copyExistingProperties(newDefaults, defaults);\n  attributes.setAttributeDefaults_(newDefaults);  // eslint-disable-line\n  textures.setTextureDefaults_(newDefaults);  // eslint-disable-line\n}\n\nconst prefixRE = /^(.*?)_/;\nfunction addExtensionToContext(gl, extensionName) {\n  utils.glEnumToString(gl, 0);\n  const ext = gl.getExtension(extensionName);\n  if (ext) {\n    const enums = {};\n    const fnSuffix = prefixRE.exec(extensionName)[1];\n    const enumSuffix = '_' + fnSuffix;\n    for (const key in ext) {\n      const value = ext[key];\n      const isFunc = typeof (value) === 'function';\n      const suffix = isFunc ? fnSuffix : enumSuffix;\n      let name = key;\n      // examples of where this is not true are WEBGL_compressed_texture_s3tc\n      // and WEBGL_compressed_texture_pvrtc\n      if (key.endsWith(suffix)) {\n        name = key.substring(0, key.length - suffix.length);\n      }\n      if (gl[name] !== undefined) {\n        if (!isFunc && gl[name] !== value) {\n          helper.warn(name, gl[name], value, key);\n        }\n      } else {\n        if (isFunc) {\n          gl[name] = function(origFn) {\n            return function() {\n              return origFn.apply(ext, arguments);\n            };\n          }(value);\n        } else {\n          gl[name] = value;\n          enums[name] = value;\n        }\n      }\n    }\n    // pass the modified enums to glEnumToString\n    enums.constructor = {\n      name: ext.constructor.name,\n    };\n    utils.glEnumToString(enums, 0);\n  }\n  return ext;\n}\n\n/*\n * If you're wondering why the code doesn't just iterate\n * over all extensions using `gl.getExtensions` is that it's possible\n * some future extension is incompatible with this code. Rather than\n * have thing suddenly break it seems better to manually add to this\n * list.\n *\n */\nconst supportedExtensions = [\n  'ANGLE_instanced_arrays',\n  'EXT_blend_minmax',\n  'EXT_color_buffer_float',\n  'EXT_color_buffer_half_float',\n  'EXT_disjoint_timer_query',\n  'EXT_disjoint_timer_query_webgl2',\n  'EXT_frag_depth',\n  'EXT_sRGB',\n  'EXT_shader_texture_lod',\n  'EXT_texture_filter_anisotropic',\n  'OES_element_index_uint',\n  'OES_standard_derivatives',\n  'OES_texture_float',\n  'OES_texture_float_linear',\n  'OES_texture_half_float',\n  'OES_texture_half_float_linear',\n  'OES_vertex_array_object',\n  'WEBGL_color_buffer_float',\n  'WEBGL_compressed_texture_atc',\n  'WEBGL_compressed_texture_etc1',\n  'WEBGL_compressed_texture_pvrtc',\n  'WEBGL_compressed_texture_s3tc',\n  'WEBGL_compressed_texture_s3tc_srgb',\n  'WEBGL_depth_texture',\n  'WEBGL_draw_buffers',\n];\n\n/**\n * Attempts to enable all of the following extensions\n * and add their functions and constants to the\n * `WebGLRenderingContext` using their normal non-extension like names.\n *\n *      ANGLE_instanced_arrays\n *      EXT_blend_minmax\n *      EXT_color_buffer_float\n *      EXT_color_buffer_half_float\n *      EXT_disjoint_timer_query\n *      EXT_disjoint_timer_query_webgl2\n *      EXT_frag_depth\n *      EXT_sRGB\n *      EXT_shader_texture_lod\n *      EXT_texture_filter_anisotropic\n *      OES_element_index_uint\n *      OES_standard_derivatives\n *      OES_texture_float\n *      OES_texture_float_linear\n *      OES_texture_half_float\n *      OES_texture_half_float_linear\n *      OES_vertex_array_object\n *      WEBGL_color_buffer_float\n *      WEBGL_compressed_texture_atc\n *      WEBGL_compressed_texture_etc1\n *      WEBGL_compressed_texture_pvrtc\n *      WEBGL_compressed_texture_s3tc\n *      WEBGL_compressed_texture_s3tc_srgb\n *      WEBGL_depth_texture\n *      WEBGL_draw_buffers\n *\n * For example if `ANGLE_instanced_arrays` exists then the functions\n * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`\n * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the\n * `WebGLRenderingContext`.\n *\n * Note that if you want to know if the extension exists you should\n * probably call `gl.getExtension` for each extension. Alternatively\n * you can check for the existence of the functions or constants that\n * are expected to be added. For example\n *\n *    if (gl.drawBuffers) {\n *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2\n *      ....\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @memberOf module:twgl\n */\nfunction addExtensionsToContext(gl) {\n  for (let ii = 0; ii < supportedExtensions.length; ++ii) {\n    addExtensionToContext(gl, supportedExtensions[ii]);\n  }\n}\n\n/**\n * Creates a webgl context.\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n * @private\n */\nfunction create3DContext(canvas, opt_attribs) {\n  const names = [\"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL1 context.\n *\n * Note: Will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n * @deprecated\n * @private\n */\nfunction getWebGLContext(canvas, opt_attribs) {\n  const gl = create3DContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Creates a webgl context.\n *\n * Will return a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *     twgl.isWebGL2(gl);\n *\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n */\nfunction createContext(canvas, opt_attribs) {\n  const names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL context.  Will create a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *    function isWebGL2(gl) {\n *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n *    }\n *\n * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\nfunction getContext(canvas, opt_attribs) {\n  const gl = createContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Resize a canvas to match the size it's displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:twgl\n */\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\n  multiplier = multiplier || 1;\n  multiplier = Math.max(0, multiplier);\n  const width  = canvas.clientWidth  * multiplier | 0;\n  const height = canvas.clientHeight * multiplier | 0;\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n  return false;\n}\n\nexport {\n  addExtensionsToContext,\n  getContext,\n  getWebGLContext,\n  resizeCanvasToDisplaySize,\n  setDefaults,\n\n  attributes,\n  draw,\n  framebuffers,\n  programs,\n  textures,\n  typedarrays,\n  utils,\n  vertexArrays,\n};\n\n// function notPrivate(name) {\n//   return name[name.length - 1] !== '_';\n// }\n//\n// function copyPublicProperties(src, dst) {\n//   Object.keys(src).filter(notPrivate).forEach(function(key) {\n//     dst[key] = src[key];\n//   });\n//   return dst;\n// }\n\nexport * from './attributes.js';\nexport * from './draw.js';\nexport * from './framebuffers.js';\nexport * from './programs.js';\nexport * from './textures.js';\nexport * from './typedarrays.js';\nexport * from './utils.js';\nexport * from './vertex-arrays.js';\n\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level shader typed array related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.typedArray` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/typedArray\n */\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */\n\n/* DataType */\nconst BYTE                           = 0x1400;\nconst UNSIGNED_BYTE                  = 0x1401;\nconst SHORT                          = 0x1402;\nconst UNSIGNED_SHORT                 = 0x1403;\nconst INT                            = 0x1404;\nconst UNSIGNED_INT                   = 0x1405;\nconst FLOAT                          = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5         = 0x8363;\nconst HALF_FLOAT                   = 0x140B;\nconst UNSIGNED_INT_2_10_10_10_REV  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nconst UNSIGNED_INT_24_8            = 0x84FA;\n\nconst glTypeToTypedArray = {};\n{\n  const tt = glTypeToTypedArray;\n  tt[BYTE]                           = Int8Array;\n  tt[UNSIGNED_BYTE]                  = Uint8Array;\n  tt[SHORT]                          = Int16Array;\n  tt[UNSIGNED_SHORT]                 = Uint16Array;\n  tt[INT]                            = Int32Array;\n  tt[UNSIGNED_INT]                   = Uint32Array;\n  tt[FLOAT]                          = Float32Array;\n  tt[UNSIGNED_SHORT_4_4_4_4]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_5_5_1]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_6_5]           = Uint16Array;\n  tt[HALF_FLOAT]                     = Uint16Array;\n  tt[UNSIGNED_INT_2_10_10_10_REV]    = Uint32Array;\n  tt[UNSIGNED_INT_10F_11F_11F_REV]   = Uint32Array;\n  tt[UNSIGNED_INT_5_9_9_9_REV]       = Uint32Array;\n  tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;\n  tt[UNSIGNED_INT_24_8]              = Uint32Array;\n}\n\n/**\n * Get the GL type for a typedArray\n * @param {ArrayBufferView} typedArray a typedArray\n * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArray instanceof Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArray instanceof Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the GL type for a typedArray type\n * @param {ArrayBufferView} typedArrayType a typedArray constructor\n * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArrayType === Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArrayType === Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArrayType === Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArrayType === Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArrayType === Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the typed array constructor for a given GL type\n * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n * @memberOf module:twgl/typedArray\n */\nfunction getTypedArrayTypeForGLType(type) {\n  const CTOR = glTypeToTypedArray[type];\n  if (!CTOR) {\n    throw new Error('unknown gl type');\n  }\n  return CTOR;\n}\n\nconst isArrayBuffer = typeof SharedArrayBuffer !== 'undefined'\n  ? function isArrayBufferOrSharedArrayBuffer(a) {\n    return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);\n  }\n  : function isArrayBuffer(a) {\n    return a && a.buffer && a.buffer instanceof ArrayBuffer;\n  };\n\nexport {\n  getGLTypeForTypedArray,\n  getGLTypeForTypedArrayType,\n  getTypedArrayTypeForGLType,\n  isArrayBuffer,\n};\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Gets the gl version as a number\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {number} version of gl\n * @private\n */\n//function getVersionAsNumber(gl) {\n//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n//}\n\n/**\n * Check if context is WebGL 2.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 2.0\n * @memberOf module:twgl\n */\nfunction isWebGL2(gl) {\n  // This is the correct check but it's slow\n  //  return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGL2RenderingContext;\n  return !!gl.texStorage2D;\n}\n\n/**\n * Check if context is WebGL 1.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 1.0\n * @memberOf module:twgl\n */\nfunction isWebGL1(gl) {\n  // This is the correct check but it's slow\n  // const version = getVersionAsNumber(gl);\n  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGLRenderingContext;\n  return !gl.texStorage2D;\n}\n\n/**\n * Gets a string for WebGL enum\n *\n * Note: Several enums are the same. Without more\n * context (which function) it's impossible to always\n * give the correct enum. As it is, for matching values\n * it gives all enums. Checking the WebGL2RenderingContext\n * that means\n *\n *      0     = ZERO | POINT | NONE | NO_ERROR\n *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT\n *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB\n *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING\n *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING\n *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING\n *\n * It's also not useful for bits really unless you pass in individual bits.\n * In other words\n *\n *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\n *     twgl.glEnumToString(gl, bits);  // not going to work\n *\n * Note that some enums only exist on extensions. If you\n * want them to show up you need to pass the extension at least\n * once. For example\n *\n *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');\n *     if (ext) {\n *        twgl.glEnumToString(ext, 0);  // just prime the function\n *\n *        ..later..\n *\n *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n *        console.log(twgl.glEnumToString(gl, internalFormat));\n *\n * Notice I didn't have to pass the extension the second time. This means\n * you can have place that generically gets an enum for texture formats for example.\n * and as long as you primed the function with the extensions\n *\n * If you're using `twgl.addExtensionsToContext` to enable your extensions\n * then twgl will automatically get the extension's enums.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object\n * @param {number} value the value of the enum you want to look up.\n * @return {string} enum string or hex value\n * @memberOf module:twgl\n * @function glEnumToString\n */\nconst glEnumToString = (function() {\n  const haveEnumsForType = {};\n  const enums = {};\n\n  function addEnums(gl) {\n    const type = gl.constructor.name;\n    if (!haveEnumsForType[type]) {\n      for (const key in gl) {\n        if (typeof gl[key] === 'number') {\n          const existing = enums[gl[key]];\n          enums[gl[key]] = existing ? `${existing} | ${key}` : key;\n        }\n      }\n      haveEnumsForType[type] = true;\n    }\n  }\n\n  return function glEnumToString(gl, value) {\n    addEnums(gl);\n    return enums[value] || (typeof value === 'number' ? `0x${value.toString(16)}` : value);\n  };\n}());\n\nexport {\n  glEnumToString,\n  isWebGL1,\n  isWebGL2,\n};\n\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as programs from './programs.js';\n\n/**\n * vertex array object related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/vertexArrays\n */\n\nconst ELEMENT_ARRAY_BUFFER           = 0x8893;\n\n/**\n * @typedef {Object} VertexArrayInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n * @memberOf module:twgl\n */\n\n/**\n * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n *   who's attributes use the same attribute locations for the same purposes.\n *\n * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n *\n * also\n *\n * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n *   will affect the Vertex Array Object state.\n *\n * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n *\n *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n *    now attribute D's location.\n *\n *    So, you can pass in both shader 1 and shader 2's programInfo\n *\n * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVertexArrayInfo(gl, programInfos, bufferInfo) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  if (!programInfos.length) {\n    programInfos = [programInfos];\n  }\n  programInfos.forEach(function(programInfo) {\n    programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);\n  });\n  gl.bindVertexArray(null);\n  return {\n    numElements: bufferInfo.numElements,\n    elementType: bufferInfo.elementType,\n    vertexArrayObject: vao,\n  };\n}\n\n/**\n * Creates a vertex array object and then sets the attributes on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOAndSetAttributes(gl, setters, attribs, indices) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  programs.setAttributes(setters, attribs);\n  if (indices) {\n    gl.bindBuffer(ELEMENT_ARRAY_BUFFER, indices);\n  }\n  // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n  // like when creating buffers for other stuff will mess up this VAO's binding\n  gl.bindVertexArray(null);\n  return vao;\n}\n\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n}\n\nexport {\n  createVertexArrayInfo,\n  createVAOAndSetAttributes,\n  createVAOFromBufferInfo,\n};\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/twgl-base.js\");\n",""],"names":["typedArrays","_interopRequireWildcard","require","helper","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","STATIC_DRAW","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","BUFFER_SIZE","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","gl","undefined","defaults","attribPrefix","setAttributePrefix","prefix","setDefaults","newDefaults","copyExistingProperties","setBufferFromTypedArray","type","buffer","array","drawType","bindBuffer","bufferData","createBufferFromTypedArray","typedArray","isBuffer","createBuffer","isIndices","name","getNormalizationForTypedArrayType","typedArrayType","Int8Array","Uint8Array","getArray","length","data","texcoordRE","colorRE","guessNumComponentsFromName","numComponents","test","Error","concat","getNumComponents","arrayName","numValues","size","makeTypedArray","isArrayBuffer","Array","isArray","Type","typedArrayTypeFromGLTypeOrTypedArrayCtor","Uint16Array","Float32Array","glTypeFromGLTypeOrTypedArrayType","glTypeOrTypedArrayCtor","getGLTypeForTypedArrayType","getTypedArrayTypeForGLType","attribBufferFromBuffer","arrayType","attribBufferFromSize","numBytes","BYTES_PER_ELEMENT","attribBufferFromArrayLike","constructor","getGLTypeForTypedArray","createAttribsFromArrays","arrays","attribs","keys","forEach","attribName","attrib","value","fn","WebGLBuffer","_fn","normalization","normalize","stride","offset","divisor","setAttribInfoBufferFromArray","attribInfo","bufferSubData","getBytesPerValueForGLType","positionKeys","getNumElementsFromNonIndexedArrays","key","ii","numElements","getNumElementsFromAttributes","getBufferParameter","bytesPerValue","totalElements","createBufferInfoFromArrays","srcBufferInfo","newAttribs","bufferInfo","assign","indices","newIndices","elementType","createBufferFromArray","createBuffersFromArrays","buffers","programs","TRIANGLES","drawBufferInfo","count","instanceCount","drawElementsInstanced","drawElements","drawArraysInstanced","drawArrays","drawObjectList","objectsToDraw","lastUsedProgramInfo","lastUsedBufferInfo","object","active","programInfo","vertexArrayInfo","bindBuffers","useProgram","program","vertexArrayObject","bindVertexArray","setBuffersAndAttributes","setUniforms","uniforms","textures","FRAMEBUFFER","RENDERBUFFER","TEXTURE_2D","DEPTH_COMPONENT","RGBA","DEPTH_COMPONENT24","DEPTH_COMPONENT32F","DEPTH24_STENCIL8","DEPTH32F_STENCIL8","RGBA4","RGB5_A1","RGB565","DEPTH_COMPONENT16","STENCIL_INDEX","STENCIL_INDEX8","DEPTH_STENCIL","COLOR_ATTACHMENT0","DEPTH_ATTACHMENT","STENCIL_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","CLAMP_TO_EDGE","LINEAR","defaultAttachments","format","min","wrap","attachmentsByFormat","getAttachmentPointForFormat","internalFormat","renderbufferFormats","isRenderbufferFormat","MAX_COLOR_ATTACHMENT_POINTS","isColorAttachmentPoint","attachmentPoint","createFramebufferInfo","attachments","width","height","target","fb","createFramebuffer","bindFramebuffer","drawingBufferWidth","drawingBufferHeight","usedColorAttachmentsPoints","framebufferInfo","framebuffer","attachmentOptions","attachment","samples","push","createRenderbuffer","bindRenderbuffer","renderbufferStorageMultisample","renderbufferStorage","textureOptions","auto","minMag","mag","wrapS","wrapT","createTexture","isRenderbuffer","framebufferRenderbuffer","isTexture","layer","framebufferTextureLayer","level","framebufferTexture2D","drawBuffers","resizeFramebufferInfo","ndx","resizeTexture","bindFramebufferInfo","viewport","copyNamedProperties","names","src","dst","error","_console","console","apply","arguments","warn","_console2","isTypeWeakMaps","Map","isType","weakMap","isOfType","s","toString","substring","WebGLRenderbuffer","isShader","WebGLShader","WebGLTexture","isSampler","WebGLSampler","utils","_regeneratorRuntime","o","Symbol","iterator","c","asyncIterator","toStringTag","define","enumerable","configurable","writable","Generator","create","Context","makeInvokeMethod","tryCatch","arg","h","l","f","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","setPrototypeOf","awrap","async","Promise","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","ownKeys","getOwnPropertySymbols","filter","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","obj","_toPropertyKey","_toPrimitive","String","toPrimitive","Number","asyncGeneratorStep","gen","reject","_next","_throw","info","_asyncToGenerator","self","args","err","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","_createForOfIteratorHelper","allowArrayLike","it","F","_e","normalCompletion","didErr","step","_e2","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","minLen","_arrayLikeToArray","from","iter","len","arr2","getElementById","id","document","TEXTURE0","DYNAMIC_DRAW","UNIFORM_BUFFER","TRANSFORM_FEEDBACK_BUFFER","TRANSFORM_FEEDBACK","COMPILE_STATUS","LINK_STATUS","FRAGMENT_SHADER","VERTEX_SHADER","SEPARATE_ATTRIBS","ACTIVE_UNIFORMS","ACTIVE_ATTRIBUTES","TRANSFORM_FEEDBACK_VARYINGS","ACTIVE_UNIFORM_BLOCKS","UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","UNIFORM_BLOCK_DATA_SIZE","UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2x3","FLOAT_MAT2x4","FLOAT_MAT3x2","FLOAT_MAT3x4","FLOAT_MAT4x2","FLOAT_MAT4x3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","typeMap","getBindPointForSamplerType","bindPoint","floatSetter","location","uniform1f","floatArraySetter","uniform1fv","floatVec2Setter","uniform2fv","floatVec3Setter","uniform3fv","floatVec4Setter","uniform4fv","intSetter","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","uintSetter","uniform1ui","uintArraySetter","uniform1uiv","uintVec2Setter","uniform2uiv","uintVec3Setter","uniform3uiv","uintVec4Setter","uniform4uiv","floatMat2Setter","uniformMatrix2fv","floatMat3Setter","uniformMatrix3fv","floatMat4Setter","uniformMatrix4fv","floatMat23Setter","uniformMatrix2x3fv","floatMat32Setter","uniformMatrix3x2fv","floatMat24Setter","uniformMatrix2x4fv","floatMat42Setter","uniformMatrix4x2fv","floatMat34Setter","uniformMatrix3x4fv","floatMat43Setter","uniformMatrix4x3fv","samplerSetter","unit","isWebGL2","textureOrPair","texture","sampler","activeTexture","bindTexture","bindSampler","samplerArraySetter","units","Int32Array","index","setter","arraySetter","cols","Uint32Array","rows","floatAttribSetter","b","disableVertexAttribArray","vertexAttrib4fv","vertexAttrib3fv","vertexAttrib2fv","vertexAttrib1fv","enableVertexAttribArray","vertexAttribPointer","vertexAttribDivisor","intAttribSetter","vertexAttrib4iv","vertexAttribIPointer","uintAttribSetter","vertexAttrib4uiv","matAttribSetter","typeInfo","defaultSize","rowOffset","attrTypeMap","errorRE","addLineNumbersWithError","log","lineOffset","matches","matchAll","lineNoToErrorMap","map","m","lineNo","parseInt","end","msg","split","line","join","spaceRE","prepShaderSource","shaderSource","replace","reportError","progOptions","errorCallback","callback","setTimeout","errors","checkShaderStatus","shaderType","shader","errFn","compiled","getShaderParameter","lastError","getShaderInfoLog","_prepShaderSource","getShaderSource","glEnumToString","getProgramOptions","opt_attribs","opt_locations","opt_errorCallback","transformFeedbackVaryings","transformFeedbackMode","opt","attribLocations","options","_len","_key","defaultShaderType","getShaderTypeFromScriptType","scriptType","indexOf","deleteProgramAndShaders","notThese","shaders","getAttachedShaders","_iterator","_step","deleteShader","deleteProgram","wait","ms","createProgramNoCheck","programOptions","createProgram","_getProgramOptions","elem","text","createShader","compileShader","attachShader","entries","_ref","_ref2","loc","bindAttribLocation","varyings","linkProgram","shaderSet","Set","hasErrors","getProgramErrors","waitForProgramLinkCompletionAsync","wrapCallbackFnToAsyncFn","arg1","_len2","_key2","createProgramAsync","exports","createProgramInfoAsync","createProgramInfo","_x","_x2","_waitForProgramLinkCompletionAsync","_callee","ext","checkFn","waitTime","_callee$","_context","getExtension","getProgramParameter","COMPLETION_STATUS_KHR","waitForAllProgramsLinkCompletionAsync","_x3","_x4","_waitForAllProgramsLinkCompletionAsync","_callee2","_i3","_Object$values2","_callee2$","_context2","linked","getProgramInfoLog","SHADER_TYPE","_","createProgramFromScripts","shaderScriptIds","_iterator2","_step2","scriptId","shaderScript","createProgramFromSources","shaderSources","isBuiltIn","startsWith","tokenRE","isDigit","addSetterToUniformTree","fullPath","node","uniformSetters","tokens","tokenNdx","path","token","isArrayIndex","accessor","isLastToken","child","setUniformTree","createUniformSetters","textureUnit","createUniformSetter","uniformInfo","endsWith","uniformTree","numUniforms","getActiveUniform","substr","getUniformLocation","createTransformFeedbackInfo","numVaryings","varying","getTransformFeedbackVarying","bindTransformFeedbackInfo","transformFeedbackInfo","buf","bindBufferRange","bindBufferBase","createTransformFeedback","tf","bindTransformFeedback","createUniformBlockSpecFromProgram","uniformData","uniformIndices","pair","pname","getActiveUniforms","blockSpecs","numUniformBlocks","getActiveUniformBlockName","blockSpec","getUniformBlockIndex","usedByVertexShader","getActiveUniformBlockParameter","usedByFragmentShader","used","arraySuffixRE","pad","padding","createUniformBlockUniformSetter","view","totalRows","row","col","createUniformBlockInfoFromProgram","uniformBlockSpec","blockName","_options$offset","_options$array","_options$buffer","_options$bufferOffset","ArrayBuffer","uniformBufferIndex","byteLength","uniformBlockBinding","setters","setterTree","uniformNdx","uniformView","asFloat","asUint8","bufferOffset","createUniformBlockInfo","bindUniformBlock","uniformBlockInfo","_uniformBlockInfo$siz","bufferBindIndex","setUniformBlock","setBlockUniforms","tree","prop","actualSetters","numArgs","aNdx","setUniformsAndBindTextures","createAttributeSetters","attribSetters","numAttribs","getActiveAttrib","getAttribLocation","setAttributes","createProgramInfoFromProgram","uniformLocations","fromEntries","_ref3","_ref4","k","_ref5","_ref6","notIdRE","source","script","origCallback","checkAllPrograms","programSpecs","noDeleteShadersSet","_i","_Object$entries","_Object$entries$_i","spec","_i2","_Object$values","_iterator3","_step3","createPrograms","_ref7","_ref8","add","createProgramInfos","createProgramInfosForPrograms","_ref9","_ref10","createProgramsAsync","createProgramInfosAsync","textureColor","crossOrigin","getShared2DContext","s_ctx","createElement","getContext","ALPHA","RGB","LUMINANCE","LUMINANCE_ALPHA","NEAREST","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","TEXTURE_MIN_LOD","TEXTURE_MAX_LOD","TEXTURE_BASE_LEVEL","TEXTURE_MAX_LEVEL","TEXTURE_COMPARE_MODE","TEXTURE_COMPARE_FUNC","UNPACK_ALIGNMENT","UNPACK_ROW_LENGTH","UNPACK_IMAGE_HEIGHT","UNPACK_SKIP_PIXELS","UNPACK_SKIP_ROWS","UNPACK_SKIP_IMAGES","UNPACK_COLORSPACE_CONVERSION_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_FLIP_Y_WEBGL","R8","R8_SNORM","R16F","R32F","R8UI","R8I","RG16UI","RG16I","RG32UI","RG32I","RG8","RG8_SNORM","RG16F","RG32F","RG8UI","RG8I","R16UI","R16I","R32UI","R32I","RGB8","SRGB8","RGB8_SNORM","R11F_G11F_B10F","RGB9_E5","RGB16F","RGB32F","RGB8UI","RGB8I","RGB16UI","RGB16I","RGB32UI","RGB32I","RGBA8","SRGB8_ALPHA8","RGBA8_SNORM","RGB10_A2","RGBA16F","RGBA32F","RGBA8UI","RGBA8I","RGB10_A2UI","RGBA16UI","RGBA16I","RGBA32I","RGBA32UI","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","HALF_FLOAT_OES","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","RG","RG_INTEGER","RED","RED_INTEGER","RGB_INTEGER","RGBA_INTEGER","formatInfo","numColorComponents","s_textureInternalFormatInfo","getTextureInternalFormatInfo","textureFormat","colorRenderable","textureFilterable","bytesPerElement","bytesPerElementMap","getBytesPerElementForInternalFormat","getFormatAndTypeForInternalFormat","isPowerOf2","canGenerateMipmap","canFilter","getNumComponentsForFormat","getTextureTypeForArrayType","defaultType","guessDimensions","Math","sqrt","setDefaultTextureColor","color","setPackState","_options$colorspaceCo","_options$premultiplyA","_options$flipY","pixelStorei","colorspaceConversion","premultiplyAlpha","flipY","setSkipStateToDefault","setTextureSamplerParameters","parameteriFn","wrapR","minLod","maxLod","baseLevel","maxLevel","compareFunc","compareMode","setTextureParameters","tex","texParameteri","setSamplerParameters","samplerParameteri","createSampler","createSamplers","samplerOptions","samplers","make1Pixel","setTextureFilteringForSize","generateMipmap","filtering","shouldAutomaticallySetTextureFilteringForSize","getCubeFaceOrder","cubeFaceOrder","getCubeFacesWithNdx","faces","facesWithNdx","face","sort","setTextureFromElement","element","formatType","imgWidth","imgHeight","slices","nodeName","ctx","canvas","xOffset","yOffset","drawImage","texImage2D","createImageBitmap","colorSpaceConversion","imageBitmap","smallest","largest","max","depth","xMult","yMult","texImage3D","srcX","srcY","texSubImage3D","noop","urlIsSameOrigin","url","href","hostname","port","protocol","localOrigin","URL","origin","urlOrigin","setToAnonymousIfUndefinedAndURLIsNotSameOrigin","loadImage","img","Image","clearEventHandlers","removeEventListener","onError","onLoad","addEventListener","ImageBitmap","bm","cb","mode","fetch","response","ok","blob","bitmap","isTexImageSource","ImageData","HTMLElement","loadAndUseImage","setTextureTo1PixelColor","loadTextureFromUrl","loadCubemapFromUrls","urls","numToLoad","imgs","uploadImg","faceTarget","otherTarget","loadSlicesFromUrls","firstImage","setTextureFromArray","Uint8ClampedArray","dimensions","cbrt","unpackAlignment","elementsPerElement","faceSize","subarray","setEmptyTexture","isAsyncSrc","createTextures","numDownloading","images","callCallbackIfReady","onLoadFn","_twgl","attributes","_exportNames","draw","framebuffers","typedarrays","vertexArrays","addExtensionsToContext","setAttributeDefaults_","setTextureDefaults_","prefixRE","addExtensionToContext","extensionName","enums","fnSuffix","exec","enumSuffix","isFunc","suffix","origFn","supportedExtensions","create3DContext","context","getWebGLContext","createContext","resizeCanvasToDisplaySize","multiplier","clientWidth","clientHeight","glTypeToTypedArray","tt","Int16Array","CTOR","SharedArrayBuffer","isArrayBufferOrSharedArrayBuffer","texStorage2D","isWebGL1","haveEnumsForType","addEnums","existing","createVertexArrayInfo","programInfos","vao","createVertexArray","createVAOAndSetAttributes","createVAOFromBufferInfo"],"sourceRoot":""}